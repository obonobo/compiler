package token

//
// CODEGEN - DO NOT MODIFY
//
// TOOL:    ../../generate/tool.go
// GRAMMAR: ../../generate/grammar-sem.grm
//
// This file was generated by a tool, it should not be modified by hand. Instead,
// modify the grammar file listed above and rerun the codegen tool.
//

import (
	"fmt"
	"strings"
)

type SemanticAction func(stack *[]*ASTNode, tok Token)

type Kind string

type StringSet = map[string]struct{}

type KindSet = map[Kind]struct{}

type Rules = map[Kind][]Rule

type Rule struct {
	LHS Kind   // The Left Hand Side nonterminal symbol for this rule
	RHS []Kind // The RHS sentential form for this rule
}

func (r Rule) String() string {
	var rhs string
	for _, r := range r.RHS {
		rhs += string(r)
	}
	return fmt.Sprintf("%v ::= %v", r.LHS, rhs)
}

const (
	EPSILON Kind = "EPSILON" // Empty string ''
	ASSIGN  Kind = "assign"  // Assignment operator '='
	ARROW   Kind = "arrow"   // Right-pointing arrow operator '->'

	EQ    Kind = "eq"    // Arithmetic operator: equality '=='
	PLUS  Kind = "plus"  // Arithmetic operator: addition '+'
	MINUS Kind = "minus" // Arithmetic operator: subtraction '-'
	MULT  Kind = "mult"  // Arithmetic operator: multiplication '*'
	DIV   Kind = "div"   // Arithmetic operator: division '/'

	LT    Kind = "lt"    // Comparison operator: less than '<'
	NOTEQ Kind = "noteq" // Comparison operator: not equal '<>'
	LEQ   Kind = "leq"   // Comparison operator: less than or equal '<='
	GT    Kind = "gt"    // Comparison operator: greater than '>'
	GEQ   Kind = "geq"   // Comparison operator: greater than or equal '>='

	OR  Kind = "or"  // Logical operator: OR '|'
	AND Kind = "and" // Logical operator: AND '&'
	NOT Kind = "not" // Logical operator: NOT '!'

	OPENPAR   Kind = "openpar"   // Bracket: opening parenthesis '('
	CLOSEPAR  Kind = "closepar"  // Bracket: closing parenthesis ')'
	OPENCUBR  Kind = "opencubr"  // Bracket: opening curly bracket '{'
	CLOSECUBR Kind = "closecubr" // Bracket: closing curly bracket '}'
	OPENSQBR  Kind = "opensqbr"  // Bracket: opening square bracket '['
	CLOSESQBR Kind = "closesqbr" // Bracket: closing square bracket ']'

	DOT        Kind = "dot"        // Period '.'
	COMMA      Kind = "comma"      // Comma ','
	SEMI       Kind = "semi"       // Semicolon ';'
	COLON      Kind = "colon"      // Colon ':'
	COLONCOLON Kind = "coloncolon" // Double colon '::'

	INLINECMT   Kind = "inlinecmt"   // Single-line comment '// ... \n'
	BLOCKCMT    Kind = "blockcmt"    // Multi-line comment '/* ... */'
	CLOSEINLINE Kind = "closeinline" // End of an inline comment '\n'
	CLOSEBLOCK  Kind = "closeblock"  // End of a block comment '*/'
	OPENINLINE  Kind = "openinline"  // Start of an inline comment '//'
	OPENBLOCK   Kind = "openblock"   // Start of a block comment '/*'

	ID        Kind = "id"       // Identifier 'exampleId_123'
	INTNUM    Kind = "intnum"   // Integer '123'
	EMPTY_DIM Kind = "emptydim" // An empty array dimension e.g.: 'integer[]'
	FLOATNUM  Kind = "floatnum" // Floating-point number '1.23'

	IF       Kind = "if"       // Reserved word 'if'
	THEN     Kind = "then"     // Reserved word 'then'
	ELSE     Kind = "else"     // Reserved word 'else'
	INTEGER  Kind = "integer"  // Reserved word 'integer'
	FLOAT    Kind = "float"    // Reserved word 'float'
	VOID     Kind = "void"     // Reserved word 'void'
	PUBLIC   Kind = "public"   // Reserved word 'public'
	PRIVATE  Kind = "private"  // Reserved word 'private'
	FUNC     Kind = "func"     // Reserved word 'func'
	VAR      Kind = "var"      // Reserved word 'var'
	STRUCT   Kind = "struct"   // Reserved word 'struct'
	WHILE    Kind = "while"    // Reserved word 'while'
	READ     Kind = "read"     // Reserved word 'read'
	WRITE    Kind = "write"    // Reserved word 'write'
	RETURN   Kind = "return"   // Reserved word 'return'
	SELF     Kind = "self"     // Reserved word 'self'
	INHERITS Kind = "inherits" // Reserved word 'inherits'
	LET      Kind = "let"      // Reserved word 'let'
	IMPL     Kind = "impl"     // Reserved word 'impl'

	INVALIDID           Kind = "invalidid"           // Error token
	INVALIDNUM          Kind = "invalidnum"          // Error token
	INVALIDCHAR         Kind = "invalidchar"         // Error token
	UNTERMINATEDCOMMENT Kind = "unterminatedcomment" // Error token
)

func Comments() []Kind {
	return []Kind{INLINECMT, BLOCKCMT, CLOSEBLOCK, CLOSEINLINE}
}

const (
	ADDOP                             Kind = "<addOp>"
	ANOTHER                           Kind = "<another>"
	ANOTHER_FUNCTIONCALL              Kind = "<another-functionCall>"
	ANOTHER_VARIABLE                  Kind = "<another-variable>"
	APARAMS                           Kind = "<aParams>"
	APARAMSTAIL                       Kind = "<aParamsTail>"
	ARITHEXPR                         Kind = "<arithExpr>"
	ARITHORRELEXPR_DISAMBIGUATE       Kind = "<arithOrRelExpr-disambiguate>"
	ARRAYSIZE                         Kind = "<arraySize>"
	ARRAYSIZE_FACTORIZED              Kind = "<arraySize-factorized>"
	ASSIGNOP                          Kind = "<assignOp>"
	ASSIGNSTAT                        Kind = "<assignStat>"
	ASSIGNSTATORFUNCCALL              Kind = "<assignStatOrFuncCall>"
	ASSIGNSTATORFUNCCALL_DISAMBIGUATE Kind = "<assignStatOrFuncCall-disambiguate>"
	EXPR                              Kind = "<expr>"
	FACTOR                            Kind = "<factor>"
	FLOATNUMM                         Kind = "<floatNumm>"
	FPARAMS                           Kind = "<fParams>"
	FPARAMSTAIL                       Kind = "<fParamsTail>"
	FUNCBODY                          Kind = "<funcBody>"
	FUNCDECL                          Kind = "<funcDecl>"
	FUNCDEF                           Kind = "<funcDef>"
	FUNCHEAD                          Kind = "<funcHead>"
	FUNCTIONCALL                      Kind = "<functionCall>"
	FUNCTIONCALL_DISAMBIGUATE         Kind = "<functionCall-disambiguate>"
	IDD                               Kind = "<idd>"
	IMPLDEF                           Kind = "<implDef>"
	INDICE                            Kind = "<indice>"
	INTNUMM                           Kind = "<intNumm>"
	MEMBERDECL                        Kind = "<memberDecl>"
	MORE_ASSIGN                       Kind = "<more-assign>"
	MORE_FUNC                         Kind = "<more-func>"
	MORE_INDICE                       Kind = "<more-indice>"
	MULTOP                            Kind = "<multOp>"
	NOTT                              Kind = "<nott>"
	OPT_STRUCTDECL2                   Kind = "<opt-structDecl2>"
	PROG                              Kind = "<prog>"
	RELEXPR                           Kind = "<relExpr>"
	RELOP                             Kind = "<relOp>"
	REPT_APARAMS1                     Kind = "<rept-aParams1>"
	REPT_FPARAMS3                     Kind = "<rept-fParams3>"
	REPT_FPARAMS4                     Kind = "<rept-fParams4>"
	REPT_FPARAMSTAIL4                 Kind = "<rept-fParamsTail4>"
	REPT_FUNCBODY1                    Kind = "<rept-funcBody1>"
	REPT_IMPLDEF3                     Kind = "<rept-implDef3>"
	REPT_OPT_STRUCTDECL22             Kind = "<rept-opt-structDecl22>"
	REPT_PROG0                        Kind = "<rept-prog0>"
	REPT_STATBLOCK1                   Kind = "<rept-statBlock1>"
	REPT_STRUCTDECL4                  Kind = "<rept-structDecl4>"
	REPT_VARDECL4                     Kind = "<rept-varDecl4>"
	RETURNTYPE                        Kind = "<returnType>"
	RIGHTREC_ARITHEXPR                Kind = "<rightrec-arithExpr>"
	RIGHTREC_TERM                     Kind = "<rightrec-term>"
	SIGN                              Kind = "<sign>"
	START                             Kind = "<START>"
	STATBLOCK                         Kind = "<statBlock>"
	STATEMENT                         Kind = "<statement>"
	STRUCTDECL                        Kind = "<structDecl>"
	STRUCTORIMPLORFUNC                Kind = "<structOrImplOrFunc>"
	TERM                              Kind = "<term>"
	TYPE                              Kind = "<type>"
	VARDECL                           Kind = "<varDecl>"
	VARDECLORSTAT                     Kind = "<varDeclOrStat>"
	VARIABLE                          Kind = "<variable>"
	VARIABLE_DISAMBIGUATE             Kind = "<variable-disambiguate>"
	VARORFUNCCALL                     Kind = "<varOrFuncCall>"
	VARORFUNCCALL_DISAMBIGUATE        Kind = "<varOrFuncCall-disambiguate>"
	VISIBILITY                        Kind = "<visibility>"
	VOIDD                             Kind = "<voidd>"
)

var nonterminals = NONTERMINALS()
var NONTERMINALS = func() KindSet {
	return KindSet{
		ADDOP:                             {},
		ANOTHER:                           {},
		ANOTHER_FUNCTIONCALL:              {},
		ANOTHER_VARIABLE:                  {},
		APARAMS:                           {},
		APARAMSTAIL:                       {},
		ARITHEXPR:                         {},
		ARITHORRELEXPR_DISAMBIGUATE:       {},
		ARRAYSIZE:                         {},
		ARRAYSIZE_FACTORIZED:              {},
		ASSIGNOP:                          {},
		ASSIGNSTAT:                        {},
		ASSIGNSTATORFUNCCALL:              {},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: {},
		EXPR:                              {},
		FACTOR:                            {},
		FLOATNUMM:                         {},
		FPARAMS:                           {},
		FPARAMSTAIL:                       {},
		FUNCBODY:                          {},
		FUNCDECL:                          {},
		FUNCDEF:                           {},
		FUNCHEAD:                          {},
		FUNCTIONCALL:                      {},
		FUNCTIONCALL_DISAMBIGUATE:         {},
		IDD:                               {},
		IMPLDEF:                           {},
		INDICE:                            {},
		INTNUMM:                           {},
		MEMBERDECL:                        {},
		MORE_ASSIGN:                       {},
		MORE_FUNC:                         {},
		MORE_INDICE:                       {},
		MULTOP:                            {},
		NOTT:                              {},
		OPT_STRUCTDECL2:                   {},
		PROG:                              {},
		RELEXPR:                           {},
		RELOP:                             {},
		REPT_APARAMS1:                     {},
		REPT_FPARAMS3:                     {},
		REPT_FPARAMS4:                     {},
		REPT_FPARAMSTAIL4:                 {},
		REPT_FUNCBODY1:                    {},
		REPT_IMPLDEF3:                     {},
		REPT_OPT_STRUCTDECL22:             {},
		REPT_PROG0:                        {},
		REPT_STATBLOCK1:                   {},
		REPT_STRUCTDECL4:                  {},
		REPT_VARDECL4:                     {},
		RETURNTYPE:                        {},
		RIGHTREC_ARITHEXPR:                {},
		RIGHTREC_TERM:                     {},
		SIGN:                              {},
		START:                             {},
		STATBLOCK:                         {},
		STATEMENT:                         {},
		STRUCTDECL:                        {},
		STRUCTORIMPLORFUNC:                {},
		TERM:                              {},
		TYPE:                              {},
		VARDECL:                           {},
		VARDECLORSTAT:                     {},
		VARIABLE:                          {},
		VARIABLE_DISAMBIGUATE:             {},
		VARORFUNCCALL:                     {},
		VARORFUNCCALL_DISAMBIGUATE:        {},
		VISIBILITY:                        {},
		VOIDD:                             {},
	}
}

func IsNonterminal(symbol Kind) bool {
	_, ok := nonterminals[symbol]
	return ok
}

// SEMANTIC ACTIONS
const (
	SEM_ADDOP_MAKEFAMILY               Kind = "(SEM-ADDOP-MAKEFAMILY)"
	SEM_AND_MAKENODE                   Kind = "(SEM-AND-MAKENODE)"
	SEM_ARITH_EXPR_MAKENODE            Kind = "(SEM-ARITH-EXPR-MAKENODE)"
	SEM_ASSIGNOP_MAKENODE              Kind = "(SEM-ASSIGNOP-MAKENODE)"
	SEM_ASSIGN_MAKEFAMILY              Kind = "(SEM-ASSIGN-MAKEFAMILY)"
	SEM_DIMLIST_MAKEFAMILY             Kind = "(SEM-DIMLIST-MAKEFAMILY)"
	SEM_DIM_EMPTY_MAKENODE             Kind = "(SEM-DIM-EMPTY-MAKENODE)"
	SEM_DIM_MAKENODE                   Kind = "(SEM-DIM-MAKENODE)"
	SEM_DIV_MAKENODE                   Kind = "(SEM-DIV-MAKENODE)"
	SEM_EQ_MAKENODE                    Kind = "(SEM-EQ-MAKENODE)"
	SEM_EXPR_MAKENODE                  Kind = "(SEM-EXPR-MAKENODE)"
	SEM_FACTOR_MAKENODE                Kind = "(SEM-FACTOR-MAKENODE)"
	SEM_FLOATNUM_MAKENODE              Kind = "(SEM-FLOATNUM-MAKENODE)"
	SEM_FLOAT_MAKENODE                 Kind = "(SEM-FLOAT-MAKENODE)"
	SEM_FPARAM_LIST_MAKEFAMILY         Kind = "(SEM-FPARAM-LIST-MAKEFAMILY)"
	SEM_FPARAM_MAKEFAMILY              Kind = "(SEM-FPARAM-MAKEFAMILY)"
	SEM_FUNCDEFLIST_MAKEFAMILY         Kind = "(SEM-FUNCDEFLIST-MAKEFAMILY)"
	SEM_FUNC_BODY_MAKEFAMILY           Kind = "(SEM-FUNC-BODY-MAKEFAMILY)"
	SEM_FUNC_CALL_MAKEFAMILY           Kind = "(SEM-FUNC-CALL-MAKEFAMILY)"
	SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY Kind = "(SEM-FUNC-CALL-PARAMLIST-MAKEFAMILY)"
	SEM_FUNC_CALL_PARAM_MAKENODE       Kind = "(SEM-FUNC-CALL-PARAM-MAKENODE)"
	SEM_FUNC_DECL_MAKEFAMILY           Kind = "(SEM-FUNC-DECL-MAKEFAMILY)"
	SEM_FUNC_DEF_MAKEFAMILY            Kind = "(SEM-FUNC-DEF-MAKEFAMILY)"
	SEM_GEQ_MAKENODE                   Kind = "(SEM-GEQ-MAKENODE)"
	SEM_GT_MAKENODE                    Kind = "(SEM-GT-MAKENODE)"
	SEM_ID_MAKENODE                    Kind = "(SEM-ID-MAKENODE)"
	SEM_IF_MAKEFAMILY                  Kind = "(SEM-IF-MAKEFAMILY)"
	SEM_IMPL_DEF_MAKEFAMILY            Kind = "(SEM-IMPL-DEF-MAKEFAMILY)"
	SEM_INDEXLIST_MAKEFAMILY           Kind = "(SEM-INDEXLIST-MAKEFAMILY)"
	SEM_INDEX_MAKENODE                 Kind = "(SEM-INDEX-MAKENODE)"
	SEM_INHERITS_FRESH                 Kind = "(SEM-INHERITS-FRESH)"
	SEM_INHERITS_MAKEFAMILY            Kind = "(SEM-INHERITS-MAKEFAMILY)"
	SEM_INTEGER_MAKENODE               Kind = "(SEM-INTEGER-MAKENODE)"
	SEM_INTNUM_MAKENODE                Kind = "(SEM-INTNUM-MAKENODE)"
	SEM_LEQ_MAKENODE                   Kind = "(SEM-LEQ-MAKENODE)"
	SEM_LT_MAKENODE                    Kind = "(SEM-LT-MAKENODE)"
	SEM_MEMBERS_MAKEFAMILY             Kind = "(SEM-MEMBERS-MAKEFAMILY)"
	SEM_MEMBER_MAKEFAMILY              Kind = "(SEM-MEMBER-MAKEFAMILY)"
	SEM_MINUS_MAKENODE                 Kind = "(SEM-MINUS-MAKENODE)"
	SEM_MULTOP_MAKEFAMILY              Kind = "(SEM-MULTOP-MAKEFAMILY)"
	SEM_MULT_MAKENODE                  Kind = "(SEM-MULT-MAKENODE)"
	SEM_NEGATIVE_MAKENODE              Kind = "(SEM-NEGATIVE-MAKENODE)"
	SEM_NEQ_MAKENODE                   Kind = "(SEM-NEQ-MAKENODE)"
	SEM_NOT_MAKENODE                   Kind = "(SEM-NOT-MAKENODE)"
	SEM_OR_MAKENODE                    Kind = "(SEM-OR-MAKENODE)"
	SEM_PLUS_MAKENODE                  Kind = "(SEM-PLUS-MAKENODE)"
	SEM_POSITIVE_MAKENODE              Kind = "(SEM-POSITIVE-MAKENODE)"
	SEM_PRIVATE_MAKENODE               Kind = "(SEM-PRIVATE-MAKENODE)"
	SEM_PROG_MAKE_NODE                 Kind = "(SEM-PROG-MAKE-NODE)"
	SEM_PUBLIC_MAKENODE                Kind = "(SEM-PUBLIC-MAKENODE)"
	SEM_READ_MAKEFAMILY                Kind = "(SEM-READ-MAKEFAMILY)"
	SEM_REL_EXPR_MAKENODE              Kind = "(SEM-REL-EXPR-MAKENODE)"
	SEM_REL_MAKEFAMILY                 Kind = "(SEM-REL-MAKEFAMILY)"
	SEM_REPT_PROG0_MAKEEPSILON         Kind = "(SEM-REPT-PROG0-MAKEEPSILON)"
	SEM_REPT_PROG0_MAKESIBLING         Kind = "(SEM-REPT-PROG0-MAKESIBLING)"
	SEM_RETURNTYPE_MAKEFAMILY          Kind = "(SEM-RETURNTYPE-MAKEFAMILY)"
	SEM_RETURN_MAKEFAMILY              Kind = "(SEM-RETURN-MAKEFAMILY)"
	SEM_STATBLOCK_FRESH                Kind = "(SEM-STATBLOCK-FRESH)"
	SEM_STATBLOCK_MAKEFAMILY           Kind = "(SEM-STATBLOCK-MAKEFAMILY)"
	SEM_STATEMENT_MAKEFAMILY           Kind = "(SEM-STATEMENT-MAKEFAMILY)"
	SEM_STRUCT_DECL_MAKEFAMILY         Kind = "(SEM-STRUCT-DECL-MAKEFAMILY)"
	SEM_SUBJECT_MAKEFAMILY             Kind = "(SEM-SUBJECT-MAKEFAMILY)"
	SEM_TERM_MAKENODE                  Kind = "(SEM-TERM-MAKENODE)"
	SEM_TYPE_MAKEFAMILY                Kind = "(SEM-TYPE-MAKEFAMILY)"
	SEM_VARIABLE_MAKEFAMILY            Kind = "(SEM-VARIABLE-MAKEFAMILY)"
	SEM_VAR_DECL_MAKEFAMILY            Kind = "(SEM-VAR-DECL-MAKEFAMILY)"
	SEM_VOID_MAKENODE                  Kind = "(SEM-VOID-MAKENODE)"
	SEM_WHILE_MAKEFAMILY               Kind = "(SEM-WHILE-MAKEFAMILY)"
	SEM_WRITE_MAKEFAMILY               Kind = "(SEM-WRITE-MAKEFAMILY)"
)

var semActions = SEMANTIC_ACTIONS()
var SEMANTIC_ACTIONS = func() KindSet {
	return KindSet{
		SEM_ADDOP_MAKEFAMILY:               {},
		SEM_AND_MAKENODE:                   {},
		SEM_ARITH_EXPR_MAKENODE:            {},
		SEM_ASSIGNOP_MAKENODE:              {},
		SEM_ASSIGN_MAKEFAMILY:              {},
		SEM_DIMLIST_MAKEFAMILY:             {},
		SEM_DIM_EMPTY_MAKENODE:             {},
		SEM_DIM_MAKENODE:                   {},
		SEM_DIV_MAKENODE:                   {},
		SEM_EQ_MAKENODE:                    {},
		SEM_EXPR_MAKENODE:                  {},
		SEM_FACTOR_MAKENODE:                {},
		SEM_FLOATNUM_MAKENODE:              {},
		SEM_FLOAT_MAKENODE:                 {},
		SEM_FPARAM_LIST_MAKEFAMILY:         {},
		SEM_FPARAM_MAKEFAMILY:              {},
		SEM_FUNCDEFLIST_MAKEFAMILY:         {},
		SEM_FUNC_BODY_MAKEFAMILY:           {},
		SEM_FUNC_CALL_MAKEFAMILY:           {},
		SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY: {},
		SEM_FUNC_CALL_PARAM_MAKENODE:       {},
		SEM_FUNC_DECL_MAKEFAMILY:           {},
		SEM_FUNC_DEF_MAKEFAMILY:            {},
		SEM_GEQ_MAKENODE:                   {},
		SEM_GT_MAKENODE:                    {},
		SEM_ID_MAKENODE:                    {},
		SEM_IF_MAKEFAMILY:                  {},
		SEM_IMPL_DEF_MAKEFAMILY:            {},
		SEM_INDEXLIST_MAKEFAMILY:           {},
		SEM_INDEX_MAKENODE:                 {},
		SEM_INHERITS_FRESH:                 {},
		SEM_INHERITS_MAKEFAMILY:            {},
		SEM_INTEGER_MAKENODE:               {},
		SEM_INTNUM_MAKENODE:                {},
		SEM_LEQ_MAKENODE:                   {},
		SEM_LT_MAKENODE:                    {},
		SEM_MEMBERS_MAKEFAMILY:             {},
		SEM_MEMBER_MAKEFAMILY:              {},
		SEM_MINUS_MAKENODE:                 {},
		SEM_MULTOP_MAKEFAMILY:              {},
		SEM_MULT_MAKENODE:                  {},
		SEM_NEGATIVE_MAKENODE:              {},
		SEM_NEQ_MAKENODE:                   {},
		SEM_NOT_MAKENODE:                   {},
		SEM_OR_MAKENODE:                    {},
		SEM_PLUS_MAKENODE:                  {},
		SEM_POSITIVE_MAKENODE:              {},
		SEM_PRIVATE_MAKENODE:               {},
		SEM_PROG_MAKE_NODE:                 {},
		SEM_PUBLIC_MAKENODE:                {},
		SEM_READ_MAKEFAMILY:                {},
		SEM_REL_EXPR_MAKENODE:              {},
		SEM_REL_MAKEFAMILY:                 {},
		SEM_REPT_PROG0_MAKEEPSILON:         {},
		SEM_REPT_PROG0_MAKESIBLING:         {},
		SEM_RETURNTYPE_MAKEFAMILY:          {},
		SEM_RETURN_MAKEFAMILY:              {},
		SEM_STATBLOCK_FRESH:                {},
		SEM_STATBLOCK_MAKEFAMILY:           {},
		SEM_STATEMENT_MAKEFAMILY:           {},
		SEM_STRUCT_DECL_MAKEFAMILY:         {},
		SEM_SUBJECT_MAKEFAMILY:             {},
		SEM_TERM_MAKENODE:                  {},
		SEM_TYPE_MAKEFAMILY:                {},
		SEM_VARIABLE_MAKEFAMILY:            {},
		SEM_VAR_DECL_MAKEFAMILY:            {},
		SEM_VOID_MAKENODE:                  {},
		SEM_WHILE_MAKEFAMILY:               {},
		SEM_WRITE_MAKEFAMILY:               {},
	}
}

// Returns true if the symbol is a semantic action, false otherwise
func IsSemAction(symbol Kind) bool {
	_, ok := semActions[symbol]
	return ok
}

// The default semantic action is to push a new node on the stack
func defaultSemAction(stack *[]*ASTNode, action Kind, tok Token) {
	pushTop(stack, action, tok)
}

// Invokes the defaultSemAction function, of the function from the override map
// if available
func defaultSemActionOrOverride(lookup Kind, tok Token, stack *[]*ASTNode) {
	if act, ok := semDisptachOverride[lookup]; ok {
		act(stack, tok)
		return
	}
	defaultSemAction(stack, lookup, tok)
}

// Default action is to pop, change type, and repush
var SEM_DISPATCH = map[Kind]SemanticAction{
	SEM_ADDOP_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_ADDOP_MAKEFAMILY, tok, stack)
	},

	SEM_AND_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_AND_MAKENODE, tok, stack)
	},

	SEM_ARITH_EXPR_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_ARITH_EXPR_MAKENODE, tok, stack)
	},

	SEM_ASSIGNOP_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_ASSIGNOP_MAKENODE, tok, stack)
	},

	SEM_ASSIGN_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_ASSIGN_MAKEFAMILY, tok, stack)
	},

	SEM_DIMLIST_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_DIMLIST_MAKEFAMILY, tok, stack)
	},

	SEM_DIM_EMPTY_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_DIM_EMPTY_MAKENODE, tok, stack)
	},

	SEM_DIM_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_DIM_MAKENODE, tok, stack)
	},

	SEM_DIV_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_DIV_MAKENODE, tok, stack)
	},

	SEM_EQ_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_EQ_MAKENODE, tok, stack)
	},

	SEM_EXPR_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_EXPR_MAKENODE, tok, stack)
	},

	SEM_FACTOR_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FACTOR_MAKENODE, tok, stack)
	},

	SEM_FLOATNUM_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FLOATNUM_MAKENODE, tok, stack)
	},

	SEM_FLOAT_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FLOAT_MAKENODE, tok, stack)
	},

	SEM_FPARAM_LIST_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FPARAM_LIST_MAKEFAMILY, tok, stack)
	},

	SEM_FPARAM_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FPARAM_MAKEFAMILY, tok, stack)
	},

	SEM_FUNCDEFLIST_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FUNCDEFLIST_MAKEFAMILY, tok, stack)
	},

	SEM_FUNC_BODY_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FUNC_BODY_MAKEFAMILY, tok, stack)
	},

	SEM_FUNC_CALL_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FUNC_CALL_MAKEFAMILY, tok, stack)
	},

	SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, tok, stack)
	},

	SEM_FUNC_CALL_PARAM_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FUNC_CALL_PARAM_MAKENODE, tok, stack)
	},

	SEM_FUNC_DECL_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FUNC_DECL_MAKEFAMILY, tok, stack)
	},

	SEM_FUNC_DEF_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_FUNC_DEF_MAKEFAMILY, tok, stack)
	},

	SEM_GEQ_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_GEQ_MAKENODE, tok, stack)
	},

	SEM_GT_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_GT_MAKENODE, tok, stack)
	},

	SEM_ID_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_ID_MAKENODE, tok, stack)
	},

	SEM_IF_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_IF_MAKEFAMILY, tok, stack)
	},

	SEM_IMPL_DEF_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_IMPL_DEF_MAKEFAMILY, tok, stack)
	},

	SEM_INDEXLIST_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_INDEXLIST_MAKEFAMILY, tok, stack)
	},

	SEM_INDEX_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_INDEX_MAKENODE, tok, stack)
	},

	SEM_INHERITS_FRESH: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_INHERITS_FRESH, tok, stack)
	},

	SEM_INHERITS_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_INHERITS_MAKEFAMILY, tok, stack)
	},

	SEM_INTEGER_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_INTEGER_MAKENODE, tok, stack)
	},

	SEM_INTNUM_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_INTNUM_MAKENODE, tok, stack)
	},

	SEM_LEQ_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_LEQ_MAKENODE, tok, stack)
	},

	SEM_LT_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_LT_MAKENODE, tok, stack)
	},

	SEM_MEMBERS_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_MEMBERS_MAKEFAMILY, tok, stack)
	},

	SEM_MEMBER_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_MEMBER_MAKEFAMILY, tok, stack)
	},

	SEM_MINUS_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_MINUS_MAKENODE, tok, stack)
	},

	SEM_MULTOP_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_MULTOP_MAKEFAMILY, tok, stack)
	},

	SEM_MULT_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_MULT_MAKENODE, tok, stack)
	},

	SEM_NEGATIVE_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_NEGATIVE_MAKENODE, tok, stack)
	},

	SEM_NEQ_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_NEQ_MAKENODE, tok, stack)
	},

	SEM_NOT_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_NOT_MAKENODE, tok, stack)
	},

	SEM_OR_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_OR_MAKENODE, tok, stack)
	},

	SEM_PLUS_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_PLUS_MAKENODE, tok, stack)
	},

	SEM_POSITIVE_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_POSITIVE_MAKENODE, tok, stack)
	},

	SEM_PRIVATE_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_PRIVATE_MAKENODE, tok, stack)
	},

	SEM_PROG_MAKE_NODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_PROG_MAKE_NODE, tok, stack)
	},

	SEM_PUBLIC_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_PUBLIC_MAKENODE, tok, stack)
	},

	SEM_READ_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_READ_MAKEFAMILY, tok, stack)
	},

	SEM_REL_EXPR_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_REL_EXPR_MAKENODE, tok, stack)
	},

	SEM_REL_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_REL_MAKEFAMILY, tok, stack)
	},

	SEM_REPT_PROG0_MAKEEPSILON: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_REPT_PROG0_MAKEEPSILON, tok, stack)
	},

	SEM_REPT_PROG0_MAKESIBLING: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_REPT_PROG0_MAKESIBLING, tok, stack)
	},

	SEM_RETURNTYPE_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_RETURNTYPE_MAKEFAMILY, tok, stack)
	},

	SEM_RETURN_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_RETURN_MAKEFAMILY, tok, stack)
	},

	SEM_STATBLOCK_FRESH: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_STATBLOCK_FRESH, tok, stack)
	},

	SEM_STATBLOCK_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_STATBLOCK_MAKEFAMILY, tok, stack)
	},

	SEM_STATEMENT_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_STATEMENT_MAKEFAMILY, tok, stack)
	},

	SEM_STRUCT_DECL_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_STRUCT_DECL_MAKEFAMILY, tok, stack)
	},

	SEM_SUBJECT_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_SUBJECT_MAKEFAMILY, tok, stack)
	},

	SEM_TERM_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_TERM_MAKENODE, tok, stack)
	},

	SEM_TYPE_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_TYPE_MAKEFAMILY, tok, stack)
	},

	SEM_VARIABLE_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_VARIABLE_MAKEFAMILY, tok, stack)
	},

	SEM_VAR_DECL_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_VAR_DECL_MAKEFAMILY, tok, stack)
	},

	SEM_VOID_MAKENODE: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_VOID_MAKENODE, tok, stack)
	},

	SEM_WHILE_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_WHILE_MAKEFAMILY, tok, stack)
	},

	SEM_WRITE_MAKEFAMILY: func(stack *[]*ASTNode, tok Token) {
		defaultSemActionOrOverride(SEM_WRITE_MAKEFAMILY, tok, stack)
	},
}

var terminals = TERMINALS()
var TERMINALS = func() KindSet {
	return KindSet{
		EPSILON:   {},
		OPENPAR:   {},
		CLOSEPAR:  {},
		OPENCUBR:  {},
		CLOSECUBR: {},
		OPENSQBR:  {},
		CLOSESQBR: {},
		AND:       {},
		FLOAT:     {},
		DIV:       {},
		PUBLIC:    {},
		ELSE:      {},
		INTEGER:   {},
		INTNUM:    {},
		WHILE:     {},
		ID:        {},
		EQ:        {},
		VOID:      {},
		COMMA:     {},
		LET:       {},
		MULT:      {},
		SEMI:      {},
		THEN:      {},
		STRUCT:    {},
		FLOATNUM:  {},
		WRITE:     {},
		GT:        {},
		PLUS:      {},
		IMPL:      {},
		MINUS:     {},
		ASSIGN:    {},
		LEQ:       {},
		OR:        {},
		PRIVATE:   {},
		IF:        {},
		COLON:     {},
		NOTEQ:     {},
		LT:        {},
		DOT:       {},
		GEQ:       {},
		READ:      {},
		RETURN:    {},
		NOT:       {},
		INHERITS:  {},
		FUNC:      {},
		ARROW:     {},
	}
}

func IsTerminal(symbol Kind) bool {
	_, ok := terminals[symbol]
	return ok
}

// Returns a printout of the rules
func RulesToString(rules Rules) string {
	ret := ""
	for _, v := range rules {
		for _, r := range v {
			rhs := make([]string, 0, len(r.RHS))
			for _, k := range r.RHS {
				rhs = append(rhs, string(k))
			}
			ret += fmt.Sprintf("%v ::= %v\n", r.LHS, strings.Join(rhs, " "))
		}
	}
	return ret
}

var RULES = func() Rules {
	return Rules{
		START:                             []Rule{{START, []Kind{PROG}}},
		APARAMS:                           []Rule{{APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}}, {APARAMS, []Kind{EPSILON, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY}}},
		APARAMSTAIL:                       []Rule{{APARAMSTAIL, []Kind{COMMA, EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY}}},
		ADDOP:                             []Rule{{ADDOP, []Kind{PLUS, SEM_PLUS_MAKENODE}}, {ADDOP, []Kind{MINUS, SEM_MINUS_MAKENODE}}, {ADDOP, []Kind{OR, SEM_OR_MAKENODE}}},
		ANOTHER_FUNCTIONCALL:              []Rule{{ANOTHER_FUNCTIONCALL, []Kind{DOT, FUNCTIONCALL}}, {ANOTHER_FUNCTIONCALL, []Kind{EPSILON}}},
		ANOTHER_VARIABLE:                  []Rule{{ANOTHER_VARIABLE, []Kind{DOT, VARIABLE}}, {ANOTHER_VARIABLE, []Kind{EPSILON}}},
		ANOTHER:                           []Rule{{ANOTHER, []Kind{DOT, VARORFUNCCALL}}, {ANOTHER, []Kind{EPSILON}}},
		ARITHEXPR:                         []Rule{{ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}}},
		ARITHORRELEXPR_DISAMBIGUATE:       []Rule{{ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}}, {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON}}},
		ARRAYSIZE_FACTORIZED:              []Rule{{ARRAYSIZE_FACTORIZED, []Kind{CLOSESQBR, SEM_DIM_EMPTY_MAKENODE, SEM_DIMLIST_MAKEFAMILY}}, {ARRAYSIZE_FACTORIZED, []Kind{INTNUMM, CLOSESQBR, SEM_DIM_MAKENODE, SEM_DIMLIST_MAKEFAMILY}}},
		ARRAYSIZE:                         []Rule{{ARRAYSIZE, []Kind{OPENSQBR, ARRAYSIZE_FACTORIZED}}},
		ASSIGNOP:                          []Rule{{ASSIGNOP, []Kind{ASSIGN, SEM_ASSIGNOP_MAKENODE}}},
		ASSIGNSTAT:                        []Rule{{ASSIGNSTAT, []Kind{VARIABLE, ASSIGNOP, EXPR, SEM_ASSIGN_MAKEFAMILY}}},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: []Rule{{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, MORE_ASSIGN}}, {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, MORE_FUNC}}},
		ASSIGNSTATORFUNCCALL:              []Rule{{ASSIGNSTATORFUNCCALL, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, ASSIGNSTATORFUNCCALL_DISAMBIGUATE}}},
		EXPR:                              []Rule{{EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}}},
		FPARAMS:                           []Rule{{FPARAMS, []Kind{IDD, COLON, TYPE, REPT_FPARAMS3, SEM_DIMLIST_MAKEFAMILY, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY, REPT_FPARAMS4}}, {FPARAMS, []Kind{EPSILON, SEM_FPARAM_LIST_MAKEFAMILY}}},
		FPARAMSTAIL:                       []Rule{{FPARAMSTAIL, []Kind{COMMA, IDD, COLON, TYPE, REPT_FPARAMSTAIL4, SEM_DIMLIST_MAKEFAMILY, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY}}},
		FACTOR:                            []Rule{{FACTOR, []Kind{VARORFUNCCALL, SEM_FACTOR_MAKENODE}}, {FACTOR, []Kind{INTNUMM, SEM_FACTOR_MAKENODE}}, {FACTOR, []Kind{FLOATNUMM, SEM_FACTOR_MAKENODE}}, {FACTOR, []Kind{OPENPAR, ARITHEXPR, CLOSEPAR, SEM_FACTOR_MAKENODE}}, {FACTOR, []Kind{NOTT, FACTOR, SEM_FACTOR_MAKENODE}}, {FACTOR, []Kind{SIGN, FACTOR, SEM_FACTOR_MAKENODE}}},
		FLOATNUMM:                         []Rule{{FLOATNUMM, []Kind{FLOATNUM, SEM_FLOATNUM_MAKENODE}}},
		FUNCBODY:                          []Rule{{FUNCBODY, []Kind{OPENCUBR, REPT_FUNCBODY1, CLOSECUBR}}},
		FUNCDECL:                          []Rule{{FUNCDECL, []Kind{FUNCHEAD, SEMI, SEM_FUNC_DECL_MAKEFAMILY}}},
		FUNCDEF:                           []Rule{{FUNCDEF, []Kind{FUNCHEAD, FUNCBODY, SEM_FUNC_DEF_MAKEFAMILY}}},
		FUNCHEAD:                          []Rule{{FUNCHEAD, []Kind{FUNC, IDD, OPENPAR, FPARAMS, CLOSEPAR, ARROW, RETURNTYPE}}},
		FUNCTIONCALL_DISAMBIGUATE:         []Rule{{FUNCTIONCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, ANOTHER_FUNCTIONCALL}}, {FUNCTIONCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, DOT, FUNCTIONCALL}}},
		FUNCTIONCALL:                      []Rule{{FUNCTIONCALL, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, FUNCTIONCALL_DISAMBIGUATE}}},
		IDD:                               []Rule{{IDD, []Kind{ID, SEM_ID_MAKENODE}}},
		IMPLDEF:                           []Rule{{IMPLDEF, []Kind{IMPL, IDD, OPENCUBR, REPT_IMPLDEF3, CLOSECUBR, SEM_IMPL_DEF_MAKEFAMILY}}},
		INDICE:                            []Rule{{INDICE, []Kind{OPENSQBR, ARITHEXPR, CLOSESQBR, SEM_INDEX_MAKENODE, SEM_INDEXLIST_MAKEFAMILY}}},
		INTNUMM:                           []Rule{{INTNUMM, []Kind{INTNUM, SEM_INTNUM_MAKENODE}}},
		MEMBERDECL:                        []Rule{{MEMBERDECL, []Kind{FUNCDECL}}, {MEMBERDECL, []Kind{VARDECL}}},
		MORE_ASSIGN:                       []Rule{{MORE_ASSIGN, []Kind{DOT, ASSIGNSTATORFUNCCALL}}, {MORE_ASSIGN, []Kind{ASSIGNOP, EXPR, SEMI, SEM_ASSIGN_MAKEFAMILY}}},
		MORE_FUNC:                         []Rule{{MORE_FUNC, []Kind{DOT, ASSIGNSTATORFUNCCALL}}, {MORE_FUNC, []Kind{SEMI}}},
		MORE_INDICE:                       []Rule{{MORE_INDICE, []Kind{INDICE, MORE_INDICE}}, {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}}},
		MULTOP:                            []Rule{{MULTOP, []Kind{MULT, SEM_MULT_MAKENODE}}, {MULTOP, []Kind{DIV, SEM_DIV_MAKENODE}}, {MULTOP, []Kind{AND, SEM_AND_MAKENODE}}},
		NOTT:                              []Rule{{NOTT, []Kind{NOT, SEM_NOT_MAKENODE}}},
		OPT_STRUCTDECL2:                   []Rule{{OPT_STRUCTDECL2, []Kind{INHERITS, IDD, SEM_INHERITS_MAKEFAMILY, REPT_OPT_STRUCTDECL22}}, {OPT_STRUCTDECL2, []Kind{EPSILON}}},
		PROG:                              []Rule{{PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}}},
		RELEXPR:                           []Rule{{RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}}},
		RELOP:                             []Rule{{RELOP, []Kind{EQ, SEM_EQ_MAKENODE}}, {RELOP, []Kind{NOTEQ, SEM_NEQ_MAKENODE}}, {RELOP, []Kind{LT, SEM_LT_MAKENODE}}, {RELOP, []Kind{GT, SEM_GT_MAKENODE}}, {RELOP, []Kind{LEQ, SEM_LEQ_MAKENODE}}, {RELOP, []Kind{GEQ, SEM_GEQ_MAKENODE}}},
		REPT_APARAMS1:                     []Rule{{REPT_APARAMS1, []Kind{APARAMSTAIL, REPT_APARAMS1}}, {REPT_APARAMS1, []Kind{EPSILON}}},
		REPT_FPARAMS3:                     []Rule{{REPT_FPARAMS3, []Kind{ARRAYSIZE, REPT_FPARAMS3}}, {REPT_FPARAMS3, []Kind{EPSILON}}},
		REPT_FPARAMS4:                     []Rule{{REPT_FPARAMS4, []Kind{FPARAMSTAIL, REPT_FPARAMS4}}, {REPT_FPARAMS4, []Kind{EPSILON}}},
		REPT_FPARAMSTAIL4:                 []Rule{{REPT_FPARAMSTAIL4, []Kind{ARRAYSIZE, REPT_FPARAMSTAIL4}}, {REPT_FPARAMSTAIL4, []Kind{EPSILON}}},
		REPT_FUNCBODY1:                    []Rule{{REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}}, {REPT_FUNCBODY1, []Kind{EPSILON, SEM_FUNC_BODY_MAKEFAMILY}}},
		REPT_IMPLDEF3:                     []Rule{{REPT_IMPLDEF3, []Kind{FUNCDEF, SEM_FUNCDEFLIST_MAKEFAMILY, REPT_IMPLDEF3}}, {REPT_IMPLDEF3, []Kind{EPSILON, SEM_FUNCDEFLIST_MAKEFAMILY}}},
		REPT_OPT_STRUCTDECL22:             []Rule{{REPT_OPT_STRUCTDECL22, []Kind{COMMA, IDD, SEM_INHERITS_MAKEFAMILY, REPT_OPT_STRUCTDECL22}}, {REPT_OPT_STRUCTDECL22, []Kind{EPSILON}}},
		REPT_PROG0:                        []Rule{{REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}}, {REPT_PROG0, []Kind{EPSILON, SEM_REPT_PROG0_MAKEEPSILON}}},
		REPT_STATBLOCK1:                   []Rule{{REPT_STATBLOCK1, []Kind{STATEMENT, SEM_STATBLOCK_MAKEFAMILY, REPT_STATBLOCK1}}, {REPT_STATBLOCK1, []Kind{EPSILON}}},
		REPT_STRUCTDECL4:                  []Rule{{REPT_STRUCTDECL4, []Kind{VISIBILITY, MEMBERDECL, SEM_MEMBER_MAKEFAMILY, SEM_MEMBERS_MAKEFAMILY, REPT_STRUCTDECL4}}, {REPT_STRUCTDECL4, []Kind{EPSILON, SEM_MEMBERS_MAKEFAMILY}}},
		REPT_VARDECL4:                     []Rule{{REPT_VARDECL4, []Kind{ARRAYSIZE, REPT_VARDECL4}}, {REPT_VARDECL4, []Kind{EPSILON, SEM_DIMLIST_MAKEFAMILY}}},
		RETURNTYPE:                        []Rule{{RETURNTYPE, []Kind{TYPE, SEM_RETURNTYPE_MAKEFAMILY}}, {RETURNTYPE, []Kind{VOIDD, SEM_RETURNTYPE_MAKEFAMILY}}},
		RIGHTREC_ARITHEXPR:                []Rule{{RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, SEM_ADDOP_MAKEFAMILY, RIGHTREC_ARITHEXPR}}, {RIGHTREC_ARITHEXPR, []Kind{EPSILON}}},
		RIGHTREC_TERM:                     []Rule{{RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULTOP_MAKEFAMILY, RIGHTREC_TERM}}, {RIGHTREC_TERM, []Kind{EPSILON}}},
		SIGN:                              []Rule{{SIGN, []Kind{PLUS, SEM_POSITIVE_MAKENODE}}, {SIGN, []Kind{MINUS, SEM_NEGATIVE_MAKENODE}}},
		STATBLOCK:                         []Rule{{STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, OPENCUBR, REPT_STATBLOCK1, CLOSECUBR}}, {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, STATEMENT, SEM_STATBLOCK_MAKEFAMILY}}, {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, EPSILON}}},
		STATEMENT:                         []Rule{{STATEMENT, []Kind{ASSIGNSTATORFUNCCALL}}, {STATEMENT, []Kind{IF, OPENPAR, RELEXPR, CLOSEPAR, THEN, STATBLOCK, ELSE, STATBLOCK, SEMI, SEM_IF_MAKEFAMILY}}, {STATEMENT, []Kind{WHILE, OPENPAR, RELEXPR, CLOSEPAR, STATBLOCK, SEMI, SEM_WHILE_MAKEFAMILY}}, {STATEMENT, []Kind{READ, OPENPAR, VARIABLE, CLOSEPAR, SEMI, SEM_READ_MAKEFAMILY}}, {STATEMENT, []Kind{WRITE, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_WRITE_MAKEFAMILY}}, {STATEMENT, []Kind{RETURN, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_RETURN_MAKEFAMILY}}},
		STRUCTDECL:                        []Rule{{STRUCTDECL, []Kind{STRUCT, IDD, SEM_INHERITS_FRESH, OPT_STRUCTDECL2, OPENCUBR, REPT_STRUCTDECL4, CLOSECUBR, SEMI, SEM_STRUCT_DECL_MAKEFAMILY}}},
		STRUCTORIMPLORFUNC:                []Rule{{STRUCTORIMPLORFUNC, []Kind{STRUCTDECL}}, {STRUCTORIMPLORFUNC, []Kind{IMPLDEF}}, {STRUCTORIMPLORFUNC, []Kind{FUNCDEF}}},
		TERM:                              []Rule{{TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}}},
		TYPE:                              []Rule{{TYPE, []Kind{INTEGER, SEM_INTEGER_MAKENODE, SEM_TYPE_MAKEFAMILY}}, {TYPE, []Kind{FLOAT, SEM_FLOAT_MAKENODE, SEM_TYPE_MAKEFAMILY}}, {TYPE, []Kind{IDD, SEM_TYPE_MAKEFAMILY}}},
		VARDECL:                           []Rule{{VARDECL, []Kind{LET, IDD, COLON, TYPE, REPT_VARDECL4, SEMI, SEM_VAR_DECL_MAKEFAMILY}}},
		VARDECLORSTAT:                     []Rule{{VARDECLORSTAT, []Kind{VARDECL}}, {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}}},
		VARORFUNCCALL_DISAMBIGUATE:        []Rule{{VARORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, ANOTHER}}, {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}}},
		VARORFUNCCALL:                     []Rule{{VARORFUNCCALL, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, VARORFUNCCALL_DISAMBIGUATE}}},
		VARIABLE_DISAMBIGUATE:             []Rule{{VARIABLE_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, DOT, VARIABLE}}, {VARIABLE_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER_VARIABLE}}},
		VARIABLE:                          []Rule{{VARIABLE, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, VARIABLE_DISAMBIGUATE}}},
		VISIBILITY:                        []Rule{{VISIBILITY, []Kind{PUBLIC, SEM_PUBLIC_MAKENODE}}, {VISIBILITY, []Kind{PRIVATE, SEM_PRIVATE_MAKENODE}}},
		VOIDD:                             []Rule{{VOIDD, []Kind{VOID, SEM_VOID_MAKENODE}}},
	}
}

var FIRSTS = func() map[Kind]KindSet {
	return map[Kind]KindSet{
		OPENPAR:                           {OPENPAR: {}},
		CLOSEPAR:                          {CLOSEPAR: {}},
		MULT:                              {MULT: {}},
		PLUS:                              {PLUS: {}},
		COMMA:                             {COMMA: {}},
		MINUS:                             {MINUS: {}},
		ARROW:                             {ARROW: {}},
		DOT:                               {DOT: {}},
		DIV:                               {DIV: {}},
		COLON:                             {COLON: {}},
		SEMI:                              {SEMI: {}},
		ASSIGN:                            {ASSIGN: {}},
		OPENSQBR:                          {OPENSQBR: {}},
		CLOSESQBR:                         {CLOSESQBR: {}},
		AND:                               {AND: {}},
		ELSE:                              {ELSE: {}},
		EQ:                                {EQ: {}},
		FLOAT:                             {FLOAT: {}},
		FLOATNUM:                          {FLOATNUM: {}},
		FUNC:                              {FUNC: {}},
		GEQ:                               {GEQ: {}},
		GT:                                {GT: {}},
		ID:                                {ID: {}},
		IF:                                {IF: {}},
		IMPL:                              {IMPL: {}},
		INHERITS:                          {INHERITS: {}},
		INTNUM:                            {INTNUM: {}},
		INTEGER:                           {INTEGER: {}},
		LEQ:                               {LEQ: {}},
		LET:                               {LET: {}},
		LT:                                {LT: {}},
		NOTEQ:                             {NOTEQ: {}},
		NOT:                               {NOT: {}},
		OR:                                {OR: {}},
		PRIVATE:                           {PRIVATE: {}},
		PUBLIC:                            {PUBLIC: {}},
		READ:                              {READ: {}},
		RETURN:                            {RETURN: {}},
		STRUCT:                            {STRUCT: {}},
		THEN:                              {THEN: {}},
		VOID:                              {VOID: {}},
		WHILE:                             {WHILE: {}},
		WRITE:                             {WRITE: {}},
		OPENCUBR:                          {OPENCUBR: {}},
		CLOSECUBR:                         {CLOSECUBR: {}},
		START:                             {FUNC: {}, IMPL: {}, STRUCT: {}, EPSILON: {}},
		APARAMS:                           {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}, EPSILON: {}},
		APARAMSTAIL:                       {COMMA: {}},
		ADDOP:                             {PLUS: {}, MINUS: {}, OR: {}},
		ANOTHER_FUNCTIONCALL:              {DOT: {}, EPSILON: {}},
		ANOTHER_VARIABLE:                  {DOT: {}, EPSILON: {}},
		ANOTHER:                           {DOT: {}, EPSILON: {}},
		ARITHEXPR:                         {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		ARITHORRELEXPR_DISAMBIGUATE:       {EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, EPSILON: {}},
		ARRAYSIZE_FACTORIZED:              {CLOSESQBR: {}, INTNUM: {}},
		ARRAYSIZE:                         {OPENSQBR: {}},
		ASSIGNOP:                          {ASSIGN: {}},
		ASSIGNSTAT:                        {ID: {}},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: {OPENPAR: {}, DOT: {}, ASSIGN: {}, OPENSQBR: {}},
		ASSIGNSTATORFUNCCALL:              {ID: {}},
		EXPR:                              {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		FPARAMS:                           {ID: {}, EPSILON: {}},
		FPARAMSTAIL:                       {COMMA: {}},
		FACTOR:                            {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		FLOATNUMM:                         {FLOATNUM: {}},
		FUNCBODY:                          {OPENCUBR: {}},
		FUNCDECL:                          {FUNC: {}},
		FUNCDEF:                           {FUNC: {}},
		FUNCHEAD:                          {FUNC: {}},
		FUNCTIONCALL_DISAMBIGUATE:         {OPENPAR: {}, DOT: {}, OPENSQBR: {}},
		FUNCTIONCALL:                      {ID: {}},
		IDD:                               {ID: {}},
		IMPLDEF:                           {IMPL: {}},
		INDICE:                            {OPENSQBR: {}},
		INTNUMM:                           {INTNUM: {}},
		MEMBERDECL:                        {FUNC: {}, LET: {}},
		MORE_ASSIGN:                       {DOT: {}, ASSIGN: {}},
		MORE_FUNC:                         {DOT: {}, SEMI: {}},
		MORE_INDICE:                       {OPENSQBR: {}, EPSILON: {}},
		MULTOP:                            {MULT: {}, DIV: {}, AND: {}},
		NOTT:                              {NOT: {}},
		OPT_STRUCTDECL2:                   {INHERITS: {}, EPSILON: {}},
		PROG:                              {FUNC: {}, IMPL: {}, STRUCT: {}, EPSILON: {}},
		RELEXPR:                           {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		RELOP:                             {EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}},
		REPT_APARAMS1:                     {COMMA: {}, EPSILON: {}},
		REPT_FPARAMS3:                     {OPENSQBR: {}, EPSILON: {}},
		REPT_FPARAMS4:                     {COMMA: {}, EPSILON: {}},
		REPT_FPARAMSTAIL4:                 {OPENSQBR: {}, EPSILON: {}},
		REPT_FUNCBODY1:                    {ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, EPSILON: {}},
		REPT_IMPLDEF3:                     {FUNC: {}, EPSILON: {}},
		REPT_OPT_STRUCTDECL22:             {COMMA: {}, EPSILON: {}},
		REPT_PROG0:                        {FUNC: {}, IMPL: {}, STRUCT: {}, EPSILON: {}},
		REPT_STATBLOCK1:                   {ID: {}, IF: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, EPSILON: {}},
		REPT_STRUCTDECL4:                  {PRIVATE: {}, PUBLIC: {}, EPSILON: {}},
		REPT_VARDECL4:                     {OPENSQBR: {}, EPSILON: {}},
		RETURNTYPE:                        {FLOAT: {}, ID: {}, INTEGER: {}, VOID: {}},
		RIGHTREC_ARITHEXPR:                {PLUS: {}, MINUS: {}, OR: {}, EPSILON: {}},
		RIGHTREC_TERM:                     {MULT: {}, DIV: {}, AND: {}, EPSILON: {}},
		SIGN:                              {PLUS: {}, MINUS: {}},
		STATBLOCK:                         {ID: {}, IF: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, EPSILON: {}},
		STATEMENT:                         {ID: {}, IF: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}},
		STRUCTDECL:                        {STRUCT: {}},
		STRUCTORIMPLORFUNC:                {FUNC: {}, IMPL: {}, STRUCT: {}},
		TERM:                              {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		TYPE:                              {FLOAT: {}, ID: {}, INTEGER: {}},
		VARDECL:                           {LET: {}},
		VARDECLORSTAT:                     {ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}},
		VARORFUNCCALL_DISAMBIGUATE:        {OPENPAR: {}, DOT: {}, OPENSQBR: {}, EPSILON: {}},
		VARORFUNCCALL:                     {ID: {}},
		VARIABLE_DISAMBIGUATE:             {OPENPAR: {}, DOT: {}, OPENSQBR: {}, EPSILON: {}},
		VARIABLE:                          {ID: {}},
		VISIBILITY:                        {PRIVATE: {}, PUBLIC: {}},
		VOIDD:                             {VOID: {}},
		EPSILON:                           {EPSILON: {}},
	}
}

var FOLLOWS = func() map[Kind]KindSet {
	return map[Kind]KindSet{
		OPENPAR:                           {OPENPAR: {}, CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, ASSIGN: {}, CLOSESQBR: {}, AND: {}, EQ: {}, FLOATNUM: {}, GEQ: {}, GT: {}, ID: {}, IF: {}, INTNUM: {}, LEQ: {}, LET: {}, LT: {}, NOTEQ: {}, NOT: {}, OR: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		CLOSEPAR:                          {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, ARROW: {}, DOT: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, ID: {}, IF: {}, LEQ: {}, LET: {}, LT: {}, NOTEQ: {}, OR: {}, READ: {}, RETURN: {}, THEN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		MULT:                              {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		PLUS:                              {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		COMMA:                             {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		MINUS:                             {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		ARROW:                             {FLOAT: {}, ID: {}, INTEGER: {}, VOID: {}},
		DOT:                               {ID: {}},
		DIV:                               {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		COLON:                             {FLOAT: {}, ID: {}, INTEGER: {}},
		SEMI:                              {SEMI: {}, FUNC: {}, ID: {}, IF: {}, IMPL: {}, LET: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, STRUCT: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		ASSIGN:                            {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		OPENSQBR:                          {OPENPAR: {}, PLUS: {}, MINUS: {}, CLOSESQBR: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		CLOSESQBR:                         {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DOT: {}, DIV: {}, SEMI: {}, ASSIGN: {}, OPENSQBR: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		AND:                               {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		ELSE:                              {SEMI: {}, ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		EQ:                                {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		FLOAT:                             {CLOSEPAR: {}, COMMA: {}, SEMI: {}, OPENSQBR: {}, ID: {}, IF: {}, LET: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		FLOATNUM:                          {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		FUNC:                              {ID: {}},
		GEQ:                               {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		GT:                                {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		ID:                                {OPENPAR: {}, CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DOT: {}, DIV: {}, COLON: {}, SEMI: {}, ASSIGN: {}, OPENSQBR: {}, CLOSESQBR: {}, AND: {}, EQ: {}, FUNC: {}, GEQ: {}, GT: {}, ID: {}, IF: {}, IMPL: {}, INHERITS: {}, LEQ: {}, LET: {}, LT: {}, NOTEQ: {}, OR: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, STRUCT: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		IF:                                {OPENPAR: {}},
		IMPL:                              {ID: {}},
		INHERITS:                          {ID: {}},
		INTNUM:                            {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		INTEGER:                           {CLOSEPAR: {}, COMMA: {}, SEMI: {}, OPENSQBR: {}, ID: {}, IF: {}, LET: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		LEQ:                               {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		LET:                               {ID: {}},
		LT:                                {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		NOTEQ:                             {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		NOT:                               {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		OR:                                {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		PRIVATE:                           {FUNC: {}, LET: {}},
		PUBLIC:                            {FUNC: {}, LET: {}},
		READ:                              {OPENPAR: {}},
		RETURN:                            {OPENPAR: {}},
		STRUCT:                            {ID: {}},
		THEN:                              {SEMI: {}, ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		VOID:                              {SEMI: {}, OPENCUBR: {}},
		WHILE:                             {OPENPAR: {}},
		WRITE:                             {OPENPAR: {}},
		OPENCUBR:                          {SEMI: {}, FUNC: {}, ID: {}, IF: {}, IMPL: {}, LET: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, STRUCT: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		CLOSECUBR:                         {SEMI: {}, FUNC: {}, IMPL: {}, STRUCT: {}, CLOSECUBR: {}},
		START:                             {},
		APARAMS:                           {CLOSEPAR: {}},
		APARAMSTAIL:                       {CLOSEPAR: {}, COMMA: {}},
		ADDOP:                             {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		ANOTHER_FUNCTIONCALL:              {},
		ANOTHER_VARIABLE:                  {CLOSEPAR: {}, ASSIGN: {}},
		ANOTHER:                           {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		ARITHEXPR:                         {CLOSEPAR: {}, COMMA: {}, SEMI: {}, CLOSESQBR: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}},
		ARITHORRELEXPR_DISAMBIGUATE:       {CLOSEPAR: {}, COMMA: {}, SEMI: {}},
		ARRAYSIZE_FACTORIZED:              {CLOSEPAR: {}, COMMA: {}, SEMI: {}, OPENSQBR: {}},
		ARRAYSIZE:                         {CLOSEPAR: {}, COMMA: {}, SEMI: {}, OPENSQBR: {}},
		ASSIGNOP:                          {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		ASSIGNSTAT:                        {},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: {SEMI: {}, ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		ASSIGNSTATORFUNCCALL:              {SEMI: {}, ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		EXPR:                              {CLOSEPAR: {}, COMMA: {}, SEMI: {}},
		FPARAMS:                           {CLOSEPAR: {}},
		FPARAMSTAIL:                       {CLOSEPAR: {}, COMMA: {}},
		FACTOR:                            {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		FLOATNUMM:                         {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		FUNCBODY:                          {FUNC: {}, IMPL: {}, STRUCT: {}, CLOSECUBR: {}},
		FUNCDECL:                          {PRIVATE: {}, PUBLIC: {}, CLOSECUBR: {}},
		FUNCDEF:                           {FUNC: {}, IMPL: {}, STRUCT: {}, CLOSECUBR: {}},
		FUNCHEAD:                          {SEMI: {}, OPENCUBR: {}},
		FUNCTIONCALL_DISAMBIGUATE:         {},
		FUNCTIONCALL:                      {},
		IDD:                               {OPENPAR: {}, CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DOT: {}, DIV: {}, COLON: {}, SEMI: {}, ASSIGN: {}, OPENSQBR: {}, CLOSESQBR: {}, AND: {}, EQ: {}, FUNC: {}, GEQ: {}, GT: {}, ID: {}, IF: {}, IMPL: {}, INHERITS: {}, LEQ: {}, LET: {}, LT: {}, NOTEQ: {}, OR: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, STRUCT: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		IMPLDEF:                           {FUNC: {}, IMPL: {}, STRUCT: {}},
		INDICE:                            {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DOT: {}, DIV: {}, SEMI: {}, ASSIGN: {}, OPENSQBR: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		INTNUMM:                           {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		MEMBERDECL:                        {PRIVATE: {}, PUBLIC: {}, CLOSECUBR: {}},
		MORE_ASSIGN:                       {SEMI: {}, ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		MORE_FUNC:                         {SEMI: {}, ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		MORE_INDICE:                       {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DOT: {}, DIV: {}, SEMI: {}, ASSIGN: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		MULTOP:                            {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		NOTT:                              {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		OPT_STRUCTDECL2:                   {OPENCUBR: {}},
		PROG:                              {},
		RELEXPR:                           {CLOSEPAR: {}},
		RELOP:                             {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		REPT_APARAMS1:                     {CLOSEPAR: {}},
		REPT_FPARAMS3:                     {CLOSEPAR: {}, COMMA: {}},
		REPT_FPARAMS4:                     {CLOSEPAR: {}},
		REPT_FPARAMSTAIL4:                 {CLOSEPAR: {}, COMMA: {}},
		REPT_FUNCBODY1:                    {CLOSECUBR: {}},
		REPT_IMPLDEF3:                     {CLOSECUBR: {}},
		REPT_OPT_STRUCTDECL22:             {OPENCUBR: {}},
		REPT_PROG0:                        {},
		REPT_STATBLOCK1:                   {CLOSECUBR: {}},
		REPT_STRUCTDECL4:                  {CLOSECUBR: {}},
		REPT_VARDECL4:                     {SEMI: {}},
		RETURNTYPE:                        {SEMI: {}, OPENCUBR: {}},
		RIGHTREC_ARITHEXPR:                {CLOSEPAR: {}, COMMA: {}, SEMI: {}, CLOSESQBR: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}},
		RIGHTREC_TERM:                     {CLOSEPAR: {}, PLUS: {}, COMMA: {}, MINUS: {}, SEMI: {}, CLOSESQBR: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		SIGN:                              {OPENPAR: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}},
		STATBLOCK:                         {SEMI: {}},
		STATEMENT:                         {SEMI: {}, ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		STRUCTDECL:                        {FUNC: {}, IMPL: {}, STRUCT: {}},
		STRUCTORIMPLORFUNC:                {FUNC: {}, IMPL: {}, STRUCT: {}},
		TERM:                              {CLOSEPAR: {}, PLUS: {}, COMMA: {}, MINUS: {}, SEMI: {}, CLOSESQBR: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		TYPE:                              {CLOSEPAR: {}, COMMA: {}, SEMI: {}, OPENSQBR: {}, ID: {}, IF: {}, LET: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, OPENCUBR: {}, CLOSECUBR: {}},
		VARDECL:                           {ID: {}, IF: {}, LET: {}, PRIVATE: {}, PUBLIC: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		VARDECLORSTAT:                     {ID: {}, IF: {}, LET: {}, READ: {}, RETURN: {}, WHILE: {}, WRITE: {}, CLOSECUBR: {}},
		VARORFUNCCALL_DISAMBIGUATE:        {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		VARORFUNCCALL:                     {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DIV: {}, SEMI: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}},
		VARIABLE_DISAMBIGUATE:             {CLOSEPAR: {}, ASSIGN: {}},
		VARIABLE:                          {CLOSEPAR: {}, ASSIGN: {}},
		VISIBILITY:                        {FUNC: {}, LET: {}},
		VOIDD:                             {SEMI: {}, OPENCUBR: {}},
		EPSILON:                           {CLOSEPAR: {}, MULT: {}, PLUS: {}, COMMA: {}, MINUS: {}, DOT: {}, DIV: {}, SEMI: {}, ASSIGN: {}, CLOSESQBR: {}, AND: {}, EQ: {}, GEQ: {}, GT: {}, LEQ: {}, LT: {}, NOTEQ: {}, OR: {}, OPENCUBR: {}, CLOSECUBR: {}},
	}
}

type Key struct {
	Nonterminal Kind
	Terminal    Kind
}

var TABLE = func() map[Key]Rule {
	return map[Key]Rule{
		{START, FUNC}:                                 {START, []Kind{PROG}},
		{START, IMPL}:                                 {START, []Kind{PROG}},
		{START, STRUCT}:                               {START, []Kind{PROG}},
		{APARAMS, OPENPAR}:                            {APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}},
		{APARAMS, PLUS}:                               {APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}},
		{APARAMS, MINUS}:                              {APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}},
		{APARAMS, FLOATNUM}:                           {APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}},
		{APARAMS, ID}:                                 {APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}},
		{APARAMS, INTNUM}:                             {APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}},
		{APARAMS, NOT}:                                {APARAMS, []Kind{EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY, REPT_APARAMS1}},
		{APARAMS, CLOSEPAR}:                           {APARAMS, []Kind{EPSILON, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY}},
		{APARAMSTAIL, COMMA}:                          {APARAMSTAIL, []Kind{COMMA, EXPR, SEM_FUNC_CALL_PARAM_MAKENODE, SEM_FUNC_CALL_PARAMLIST_MAKEFAMILY}},
		{ADDOP, PLUS}:                                 {ADDOP, []Kind{PLUS, SEM_PLUS_MAKENODE}},
		{ADDOP, MINUS}:                                {ADDOP, []Kind{MINUS, SEM_MINUS_MAKENODE}},
		{ADDOP, OR}:                                   {ADDOP, []Kind{OR, SEM_OR_MAKENODE}},
		{ANOTHER_FUNCTIONCALL, DOT}:                   {ANOTHER_FUNCTIONCALL, []Kind{DOT, FUNCTIONCALL}},
		{ANOTHER_VARIABLE, DOT}:                       {ANOTHER_VARIABLE, []Kind{DOT, VARIABLE}},
		{ANOTHER_VARIABLE, CLOSEPAR}:                  {ANOTHER_VARIABLE, []Kind{EPSILON}},
		{ANOTHER_VARIABLE, ASSIGN}:                    {ANOTHER_VARIABLE, []Kind{EPSILON}},
		{ANOTHER, DOT}:                                {ANOTHER, []Kind{DOT, VARORFUNCCALL}},
		{ANOTHER, CLOSEPAR}:                           {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, MULT}:                               {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, PLUS}:                               {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, COMMA}:                              {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, MINUS}:                              {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, DIV}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, SEMI}:                               {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, CLOSESQBR}:                          {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, AND}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, EQ}:                                 {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, GEQ}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, GT}:                                 {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, LEQ}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, LT}:                                 {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, NOTEQ}:                              {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, OR}:                                 {ANOTHER, []Kind{EPSILON}},
		{ARITHEXPR, OPENPAR}:                          {ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, PLUS}:                             {ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, MINUS}:                            {ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, FLOATNUM}:                         {ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, ID}:                               {ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, INTNUM}:                           {ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, NOT}:                              {ARITHEXPR, []Kind{TERM, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, EQ}:             {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, GEQ}:            {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, GT}:             {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, LEQ}:            {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, LT}:             {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, NOTEQ}:          {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, CLOSEPAR}:       {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON}},
		{ARITHORRELEXPR_DISAMBIGUATE, COMMA}:          {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON}},
		{ARITHORRELEXPR_DISAMBIGUATE, SEMI}:           {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON}},
		{ARRAYSIZE_FACTORIZED, CLOSESQBR}:             {ARRAYSIZE_FACTORIZED, []Kind{CLOSESQBR, SEM_DIM_EMPTY_MAKENODE, SEM_DIMLIST_MAKEFAMILY}},
		{ARRAYSIZE_FACTORIZED, INTNUM}:                {ARRAYSIZE_FACTORIZED, []Kind{INTNUMM, CLOSESQBR, SEM_DIM_MAKENODE, SEM_DIMLIST_MAKEFAMILY}},
		{ARRAYSIZE, OPENSQBR}:                         {ARRAYSIZE, []Kind{OPENSQBR, ARRAYSIZE_FACTORIZED}},
		{ASSIGNOP, ASSIGN}:                            {ASSIGNOP, []Kind{ASSIGN, SEM_ASSIGNOP_MAKENODE}},
		{ASSIGNSTAT, ID}:                              {ASSIGNSTAT, []Kind{VARIABLE, ASSIGNOP, EXPR, SEM_ASSIGN_MAKEFAMILY}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, DOT}:      {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, MORE_ASSIGN}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, ASSIGN}:   {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, MORE_ASSIGN}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, OPENSQBR}: {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, MORE_ASSIGN}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, OPENPAR}:  {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, MORE_FUNC}},
		{ASSIGNSTATORFUNCCALL, ID}:                    {ASSIGNSTATORFUNCCALL, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, ASSIGNSTATORFUNCCALL_DISAMBIGUATE}},
		{EXPR, OPENPAR}:                               {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}},
		{EXPR, PLUS}:                                  {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}},
		{EXPR, MINUS}:                                 {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}},
		{EXPR, FLOATNUM}:                              {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}},
		{EXPR, ID}:                                    {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}},
		{EXPR, INTNUM}:                                {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}},
		{EXPR, NOT}:                                   {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE, SEM_EXPR_MAKENODE}},
		{FPARAMS, ID}:                                 {FPARAMS, []Kind{IDD, COLON, TYPE, REPT_FPARAMS3, SEM_DIMLIST_MAKEFAMILY, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY, REPT_FPARAMS4}},
		{FPARAMS, CLOSEPAR}:                           {FPARAMS, []Kind{EPSILON, SEM_FPARAM_LIST_MAKEFAMILY}},
		{FPARAMSTAIL, COMMA}:                          {FPARAMSTAIL, []Kind{COMMA, IDD, COLON, TYPE, REPT_FPARAMSTAIL4, SEM_DIMLIST_MAKEFAMILY, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY}},
		{FACTOR, ID}:                                  {FACTOR, []Kind{VARORFUNCCALL, SEM_FACTOR_MAKENODE}},
		{FACTOR, INTNUM}:                              {FACTOR, []Kind{INTNUMM, SEM_FACTOR_MAKENODE}},
		{FACTOR, FLOATNUM}:                            {FACTOR, []Kind{FLOATNUMM, SEM_FACTOR_MAKENODE}},
		{FACTOR, OPENPAR}:                             {FACTOR, []Kind{OPENPAR, ARITHEXPR, CLOSEPAR, SEM_FACTOR_MAKENODE}},
		{FACTOR, NOT}:                                 {FACTOR, []Kind{NOTT, FACTOR, SEM_FACTOR_MAKENODE}},
		{FACTOR, PLUS}:                                {FACTOR, []Kind{SIGN, FACTOR, SEM_FACTOR_MAKENODE}},
		{FACTOR, MINUS}:                               {FACTOR, []Kind{SIGN, FACTOR, SEM_FACTOR_MAKENODE}},
		{FLOATNUMM, FLOATNUM}:                         {FLOATNUMM, []Kind{FLOATNUM, SEM_FLOATNUM_MAKENODE}},
		{FUNCBODY, OPENCUBR}:                          {FUNCBODY, []Kind{OPENCUBR, REPT_FUNCBODY1, CLOSECUBR}},
		{FUNCDECL, FUNC}:                              {FUNCDECL, []Kind{FUNCHEAD, SEMI, SEM_FUNC_DECL_MAKEFAMILY}},
		{FUNCDEF, FUNC}:                               {FUNCDEF, []Kind{FUNCHEAD, FUNCBODY, SEM_FUNC_DEF_MAKEFAMILY}},
		{FUNCHEAD, FUNC}:                              {FUNCHEAD, []Kind{FUNC, IDD, OPENPAR, FPARAMS, CLOSEPAR, ARROW, RETURNTYPE}},
		{FUNCTIONCALL_DISAMBIGUATE, OPENPAR}:          {FUNCTIONCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, ANOTHER_FUNCTIONCALL}},
		{FUNCTIONCALL_DISAMBIGUATE, DOT}:              {FUNCTIONCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, DOT, FUNCTIONCALL}},
		{FUNCTIONCALL_DISAMBIGUATE, OPENSQBR}:         {FUNCTIONCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, DOT, FUNCTIONCALL}},
		{FUNCTIONCALL, ID}:                            {FUNCTIONCALL, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, FUNCTIONCALL_DISAMBIGUATE}},
		{IDD, ID}:                                     {IDD, []Kind{ID, SEM_ID_MAKENODE}},
		{IMPLDEF, IMPL}:                               {IMPLDEF, []Kind{IMPL, IDD, OPENCUBR, REPT_IMPLDEF3, CLOSECUBR, SEM_IMPL_DEF_MAKEFAMILY}},
		{INDICE, OPENSQBR}:                            {INDICE, []Kind{OPENSQBR, ARITHEXPR, CLOSESQBR, SEM_INDEX_MAKENODE, SEM_INDEXLIST_MAKEFAMILY}},
		{INTNUMM, INTNUM}:                             {INTNUMM, []Kind{INTNUM, SEM_INTNUM_MAKENODE}},
		{MEMBERDECL, FUNC}:                            {MEMBERDECL, []Kind{FUNCDECL}},
		{MEMBERDECL, LET}:                             {MEMBERDECL, []Kind{VARDECL}},
		{MORE_ASSIGN, DOT}:                            {MORE_ASSIGN, []Kind{DOT, ASSIGNSTATORFUNCCALL}},
		{MORE_ASSIGN, ASSIGN}:                         {MORE_ASSIGN, []Kind{ASSIGNOP, EXPR, SEMI, SEM_ASSIGN_MAKEFAMILY}},
		{MORE_FUNC, DOT}:                              {MORE_FUNC, []Kind{DOT, ASSIGNSTATORFUNCCALL}},
		{MORE_FUNC, SEMI}:                             {MORE_FUNC, []Kind{SEMI}},
		{MORE_INDICE, OPENSQBR}:                       {MORE_INDICE, []Kind{INDICE, MORE_INDICE}},
		{MORE_INDICE, CLOSEPAR}:                       {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, MULT}:                           {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, PLUS}:                           {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, COMMA}:                          {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, MINUS}:                          {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, DOT}:                            {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, DIV}:                            {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, SEMI}:                           {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, ASSIGN}:                         {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, CLOSESQBR}:                      {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, AND}:                            {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, EQ}:                             {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, GEQ}:                            {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, GT}:                             {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, LEQ}:                            {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, LT}:                             {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, NOTEQ}:                          {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MORE_INDICE, OR}:                             {MORE_INDICE, []Kind{EPSILON, SEM_INDEXLIST_MAKEFAMILY}},
		{MULTOP, MULT}:                                {MULTOP, []Kind{MULT, SEM_MULT_MAKENODE}},
		{MULTOP, DIV}:                                 {MULTOP, []Kind{DIV, SEM_DIV_MAKENODE}},
		{MULTOP, AND}:                                 {MULTOP, []Kind{AND, SEM_AND_MAKENODE}},
		{NOTT, NOT}:                                   {NOTT, []Kind{NOT, SEM_NOT_MAKENODE}},
		{OPT_STRUCTDECL2, INHERITS}:                   {OPT_STRUCTDECL2, []Kind{INHERITS, IDD, SEM_INHERITS_MAKEFAMILY, REPT_OPT_STRUCTDECL22}},
		{OPT_STRUCTDECL2, OPENCUBR}:                   {OPT_STRUCTDECL2, []Kind{EPSILON}},
		{PROG, FUNC}:                                  {PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}},
		{PROG, IMPL}:                                  {PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}},
		{PROG, STRUCT}:                                {PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}},
		{RELEXPR, OPENPAR}:                            {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{RELEXPR, PLUS}:                               {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{RELEXPR, MINUS}:                              {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{RELEXPR, FLOATNUM}:                           {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{RELEXPR, ID}:                                 {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{RELEXPR, INTNUM}:                             {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{RELEXPR, NOT}:                                {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR, SEM_REL_MAKEFAMILY, SEM_REL_EXPR_MAKENODE}},
		{RELOP, EQ}:                                   {RELOP, []Kind{EQ, SEM_EQ_MAKENODE}},
		{RELOP, NOTEQ}:                                {RELOP, []Kind{NOTEQ, SEM_NEQ_MAKENODE}},
		{RELOP, LT}:                                   {RELOP, []Kind{LT, SEM_LT_MAKENODE}},
		{RELOP, GT}:                                   {RELOP, []Kind{GT, SEM_GT_MAKENODE}},
		{RELOP, LEQ}:                                  {RELOP, []Kind{LEQ, SEM_LEQ_MAKENODE}},
		{RELOP, GEQ}:                                  {RELOP, []Kind{GEQ, SEM_GEQ_MAKENODE}},
		{REPT_APARAMS1, COMMA}:                        {REPT_APARAMS1, []Kind{APARAMSTAIL, REPT_APARAMS1}},
		{REPT_APARAMS1, CLOSEPAR}:                     {REPT_APARAMS1, []Kind{EPSILON}},
		{REPT_FPARAMS3, OPENSQBR}:                     {REPT_FPARAMS3, []Kind{ARRAYSIZE, REPT_FPARAMS3}},
		{REPT_FPARAMS3, CLOSEPAR}:                     {REPT_FPARAMS3, []Kind{EPSILON}},
		{REPT_FPARAMS3, COMMA}:                        {REPT_FPARAMS3, []Kind{EPSILON}},
		{REPT_FPARAMS4, COMMA}:                        {REPT_FPARAMS4, []Kind{FPARAMSTAIL, REPT_FPARAMS4}},
		{REPT_FPARAMS4, CLOSEPAR}:                     {REPT_FPARAMS4, []Kind{EPSILON}},
		{REPT_FPARAMSTAIL4, OPENSQBR}:                 {REPT_FPARAMSTAIL4, []Kind{ARRAYSIZE, REPT_FPARAMSTAIL4}},
		{REPT_FPARAMSTAIL4, CLOSEPAR}:                 {REPT_FPARAMSTAIL4, []Kind{EPSILON}},
		{REPT_FPARAMSTAIL4, COMMA}:                    {REPT_FPARAMSTAIL4, []Kind{EPSILON}},
		{REPT_FUNCBODY1, ID}:                          {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, IF}:                          {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, LET}:                         {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, READ}:                        {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, RETURN}:                      {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, WHILE}:                       {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, WRITE}:                       {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, CLOSECUBR}:                   {REPT_FUNCBODY1, []Kind{EPSILON, SEM_FUNC_BODY_MAKEFAMILY}},
		{REPT_IMPLDEF3, FUNC}:                         {REPT_IMPLDEF3, []Kind{FUNCDEF, SEM_FUNCDEFLIST_MAKEFAMILY, REPT_IMPLDEF3}},
		{REPT_IMPLDEF3, CLOSECUBR}:                    {REPT_IMPLDEF3, []Kind{EPSILON, SEM_FUNCDEFLIST_MAKEFAMILY}},
		{REPT_OPT_STRUCTDECL22, COMMA}:                {REPT_OPT_STRUCTDECL22, []Kind{COMMA, IDD, SEM_INHERITS_MAKEFAMILY, REPT_OPT_STRUCTDECL22}},
		{REPT_OPT_STRUCTDECL22, OPENCUBR}:             {REPT_OPT_STRUCTDECL22, []Kind{EPSILON}},
		{REPT_PROG0, FUNC}:                            {REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}},
		{REPT_PROG0, IMPL}:                            {REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}},
		{REPT_PROG0, STRUCT}:                          {REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}},
		{REPT_STATBLOCK1, ID}:                         {REPT_STATBLOCK1, []Kind{STATEMENT, SEM_STATBLOCK_MAKEFAMILY, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, IF}:                         {REPT_STATBLOCK1, []Kind{STATEMENT, SEM_STATBLOCK_MAKEFAMILY, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, READ}:                       {REPT_STATBLOCK1, []Kind{STATEMENT, SEM_STATBLOCK_MAKEFAMILY, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, RETURN}:                     {REPT_STATBLOCK1, []Kind{STATEMENT, SEM_STATBLOCK_MAKEFAMILY, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, WHILE}:                      {REPT_STATBLOCK1, []Kind{STATEMENT, SEM_STATBLOCK_MAKEFAMILY, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, WRITE}:                      {REPT_STATBLOCK1, []Kind{STATEMENT, SEM_STATBLOCK_MAKEFAMILY, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, CLOSECUBR}:                  {REPT_STATBLOCK1, []Kind{EPSILON}},
		{REPT_STRUCTDECL4, PRIVATE}:                   {REPT_STRUCTDECL4, []Kind{VISIBILITY, MEMBERDECL, SEM_MEMBER_MAKEFAMILY, SEM_MEMBERS_MAKEFAMILY, REPT_STRUCTDECL4}},
		{REPT_STRUCTDECL4, PUBLIC}:                    {REPT_STRUCTDECL4, []Kind{VISIBILITY, MEMBERDECL, SEM_MEMBER_MAKEFAMILY, SEM_MEMBERS_MAKEFAMILY, REPT_STRUCTDECL4}},
		{REPT_STRUCTDECL4, CLOSECUBR}:                 {REPT_STRUCTDECL4, []Kind{EPSILON, SEM_MEMBERS_MAKEFAMILY}},
		{REPT_VARDECL4, OPENSQBR}:                     {REPT_VARDECL4, []Kind{ARRAYSIZE, REPT_VARDECL4}},
		{REPT_VARDECL4, SEMI}:                         {REPT_VARDECL4, []Kind{EPSILON, SEM_DIMLIST_MAKEFAMILY}},
		{RETURNTYPE, FLOAT}:                           {RETURNTYPE, []Kind{TYPE, SEM_RETURNTYPE_MAKEFAMILY}},
		{RETURNTYPE, ID}:                              {RETURNTYPE, []Kind{TYPE, SEM_RETURNTYPE_MAKEFAMILY}},
		{RETURNTYPE, INTEGER}:                         {RETURNTYPE, []Kind{TYPE, SEM_RETURNTYPE_MAKEFAMILY}},
		{RETURNTYPE, VOID}:                            {RETURNTYPE, []Kind{VOIDD, SEM_RETURNTYPE_MAKEFAMILY}},
		{RIGHTREC_ARITHEXPR, PLUS}:                    {RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, SEM_ADDOP_MAKEFAMILY, RIGHTREC_ARITHEXPR}},
		{RIGHTREC_ARITHEXPR, MINUS}:                   {RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, SEM_ADDOP_MAKEFAMILY, RIGHTREC_ARITHEXPR}},
		{RIGHTREC_ARITHEXPR, OR}:                      {RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, SEM_ADDOP_MAKEFAMILY, RIGHTREC_ARITHEXPR}},
		{RIGHTREC_ARITHEXPR, CLOSEPAR}:                {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, COMMA}:                   {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, SEMI}:                    {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, CLOSESQBR}:               {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, EQ}:                      {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, GEQ}:                     {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, GT}:                      {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, LEQ}:                     {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, LT}:                      {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, NOTEQ}:                   {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_TERM, MULT}:                         {RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULTOP_MAKEFAMILY, RIGHTREC_TERM}},
		{RIGHTREC_TERM, DIV}:                          {RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULTOP_MAKEFAMILY, RIGHTREC_TERM}},
		{RIGHTREC_TERM, AND}:                          {RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULTOP_MAKEFAMILY, RIGHTREC_TERM}},
		{RIGHTREC_TERM, CLOSEPAR}:                     {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, PLUS}:                         {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, COMMA}:                        {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, MINUS}:                        {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, SEMI}:                         {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, CLOSESQBR}:                    {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, EQ}:                           {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, GEQ}:                          {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, GT}:                           {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, LEQ}:                          {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, LT}:                           {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, NOTEQ}:                        {RIGHTREC_TERM, []Kind{EPSILON}},
		{RIGHTREC_TERM, OR}:                           {RIGHTREC_TERM, []Kind{EPSILON}},
		{SIGN, PLUS}:                                  {SIGN, []Kind{PLUS, SEM_POSITIVE_MAKENODE}},
		{SIGN, MINUS}:                                 {SIGN, []Kind{MINUS, SEM_NEGATIVE_MAKENODE}},
		{STATBLOCK, OPENCUBR}:                         {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, OPENCUBR, REPT_STATBLOCK1, CLOSECUBR}},
		{STATBLOCK, ID}:                               {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, STATEMENT, SEM_STATBLOCK_MAKEFAMILY}},
		{STATBLOCK, IF}:                               {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, STATEMENT, SEM_STATBLOCK_MAKEFAMILY}},
		{STATBLOCK, READ}:                             {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, STATEMENT, SEM_STATBLOCK_MAKEFAMILY}},
		{STATBLOCK, RETURN}:                           {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, STATEMENT, SEM_STATBLOCK_MAKEFAMILY}},
		{STATBLOCK, WHILE}:                            {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, STATEMENT, SEM_STATBLOCK_MAKEFAMILY}},
		{STATBLOCK, WRITE}:                            {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, STATEMENT, SEM_STATBLOCK_MAKEFAMILY}},
		{STATBLOCK, SEMI}:                             {STATBLOCK, []Kind{SEM_STATBLOCK_FRESH, EPSILON}},
		{STATEMENT, ID}:                               {STATEMENT, []Kind{ASSIGNSTATORFUNCCALL}},
		{STATEMENT, IF}:                               {STATEMENT, []Kind{IF, OPENPAR, RELEXPR, CLOSEPAR, THEN, STATBLOCK, ELSE, STATBLOCK, SEMI, SEM_IF_MAKEFAMILY}},
		{STATEMENT, WHILE}:                            {STATEMENT, []Kind{WHILE, OPENPAR, RELEXPR, CLOSEPAR, STATBLOCK, SEMI, SEM_WHILE_MAKEFAMILY}},
		{STATEMENT, READ}:                             {STATEMENT, []Kind{READ, OPENPAR, VARIABLE, CLOSEPAR, SEMI, SEM_READ_MAKEFAMILY}},
		{STATEMENT, WRITE}:                            {STATEMENT, []Kind{WRITE, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_WRITE_MAKEFAMILY}},
		{STATEMENT, RETURN}:                           {STATEMENT, []Kind{RETURN, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_RETURN_MAKEFAMILY}},
		{STRUCTDECL, STRUCT}:                          {STRUCTDECL, []Kind{STRUCT, IDD, SEM_INHERITS_FRESH, OPT_STRUCTDECL2, OPENCUBR, REPT_STRUCTDECL4, CLOSECUBR, SEMI, SEM_STRUCT_DECL_MAKEFAMILY}},
		{STRUCTORIMPLORFUNC, STRUCT}:                  {STRUCTORIMPLORFUNC, []Kind{STRUCTDECL}},
		{STRUCTORIMPLORFUNC, IMPL}:                    {STRUCTORIMPLORFUNC, []Kind{IMPLDEF}},
		{STRUCTORIMPLORFUNC, FUNC}:                    {STRUCTORIMPLORFUNC, []Kind{FUNCDEF}},
		{TERM, OPENPAR}:                               {TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}},
		{TERM, PLUS}:                                  {TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}},
		{TERM, MINUS}:                                 {TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}},
		{TERM, FLOATNUM}:                              {TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}},
		{TERM, ID}:                                    {TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}},
		{TERM, INTNUM}:                                {TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}},
		{TERM, NOT}:                                   {TERM, []Kind{FACTOR, RIGHTREC_TERM, SEM_TERM_MAKENODE}},
		{TYPE, INTEGER}:                               {TYPE, []Kind{INTEGER, SEM_INTEGER_MAKENODE, SEM_TYPE_MAKEFAMILY}},
		{TYPE, FLOAT}:                                 {TYPE, []Kind{FLOAT, SEM_FLOAT_MAKENODE, SEM_TYPE_MAKEFAMILY}},
		{TYPE, ID}:                                    {TYPE, []Kind{IDD, SEM_TYPE_MAKEFAMILY}},
		{VARDECL, LET}:                                {VARDECL, []Kind{LET, IDD, COLON, TYPE, REPT_VARDECL4, SEMI, SEM_VAR_DECL_MAKEFAMILY}},
		{VARDECLORSTAT, LET}:                          {VARDECLORSTAT, []Kind{VARDECL}},
		{VARDECLORSTAT, ID}:                           {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, IF}:                           {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, READ}:                         {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, RETURN}:                       {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, WHILE}:                        {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, WRITE}:                        {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARORFUNCCALL_DISAMBIGUATE, OPENPAR}:         {VARORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, DOT}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, OPENSQBR}:        {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, CLOSEPAR}:        {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, MULT}:            {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, PLUS}:            {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, COMMA}:           {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, MINUS}:           {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, DIV}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, SEMI}:            {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, CLOSESQBR}:       {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, AND}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, EQ}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, GEQ}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, GT}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, LEQ}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, LT}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, NOTEQ}:           {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, OR}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER}},
		{VARORFUNCCALL, ID}:                           {VARORFUNCCALL, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, VARORFUNCCALL_DISAMBIGUATE}},
		{VARIABLE_DISAMBIGUATE, OPENPAR}:              {VARIABLE_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FUNC_CALL_MAKEFAMILY, DOT, VARIABLE}},
		{VARIABLE_DISAMBIGUATE, DOT}:                  {VARIABLE_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER_VARIABLE}},
		{VARIABLE_DISAMBIGUATE, OPENSQBR}:             {VARIABLE_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER_VARIABLE}},
		{VARIABLE_DISAMBIGUATE, CLOSEPAR}:             {VARIABLE_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER_VARIABLE}},
		{VARIABLE_DISAMBIGUATE, ASSIGN}:               {VARIABLE_DISAMBIGUATE, []Kind{MORE_INDICE, SEM_VARIABLE_MAKEFAMILY, ANOTHER_VARIABLE}},
		{VARIABLE, ID}:                                {VARIABLE, []Kind{SEM_SUBJECT_MAKEFAMILY, IDD, VARIABLE_DISAMBIGUATE}},
		{VISIBILITY, PUBLIC}:                          {VISIBILITY, []Kind{PUBLIC, SEM_PUBLIC_MAKENODE}},
		{VISIBILITY, PRIVATE}:                         {VISIBILITY, []Kind{PRIVATE, SEM_PRIVATE_MAKENODE}},
		{VOIDD, VOID}:                                 {VOIDD, []Kind{VOID, SEM_VOID_MAKENODE}},
	}
}
