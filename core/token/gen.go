package token

//
// CODEGEN - DO NOT MODIFY
//
// TOOL:    ./resources/a2/workspace/tool.go
// GRAMMAR: ./resources/a3/workspace/grammar-mangled-attribute.grm
//
// This file was generated by a tool, it should not be modified by hand. Instead,
// modify the grammar file listed above and rerun the codegen tool.
//

import (
	"fmt"
	"strings"
)

type SemanticAction func(action Kind, tok Token, semanticStack *[]*ASTNode)

type Kind string

type StringSet = map[string]struct{}

type KindSet = map[Kind]struct{}

type Rules = map[Kind][]Rule

type Rule struct {
	LHS Kind   // The Left Hand Side nonterminal symbol for this rule
	RHS []Kind // The RHS sentential form for this rule
}

func (r Rule) String() string {
	var rhs string
	for _, r := range r.RHS {
		rhs += string(r)
	}
	return fmt.Sprintf("%v ::= %v", r.LHS, rhs)
}

const (
	EPSILON Kind = "EPSILON" // Empty string ''
	ASSIGN  Kind = "assign"  // Assignment operator '='
	ARROW   Kind = "arrow"   // Right-pointing arrow operator '->'

	EQ    Kind = "eq"    // Arithmetic operator: equality '=='
	PLUS  Kind = "plus"  // Arithmetic operator: addition '+'
	MINUS Kind = "minus" // Arithmetic operator: subtraction '-'
	MULT  Kind = "mult"  // Arithmetic operator: multiplication '*'
	DIV   Kind = "div"   // Arithmetic operator: division '/'

	LT    Kind = "lt"    // Comparison operator: less than '<'
	NOTEQ Kind = "noteq" // Comparison operator: not equal '<>'
	LEQ   Kind = "leq"   // Comparison operator: less than or equal '<='
	GT    Kind = "gt"    // Comparison operator: greater than '>'
	GEQ   Kind = "geq"   // Comparison operator: greater than or equal '>='

	OR  Kind = "or"  // Logical operator: OR '|'
	AND Kind = "and" // Logical operator: AND '&'
	NOT Kind = "not" // Logical operator: NOT '!'

	OPENPAR   Kind = "openpar"   // Bracket: opening parenthesis '('
	CLOSEPAR  Kind = "closepar"  // Bracket: closing parenthesis ')'
	OPENCUBR  Kind = "opencubr"  // Bracket: opening curly bracket '{'
	CLOSECUBR Kind = "closecubr" // Bracket: closing curly bracket '}'
	OPENSQBR  Kind = "opensqbr"  // Bracket: opening square bracket '['
	CLOSESQBR Kind = "closesqbr" // Bracket: closing square bracket ']'

	DOT        Kind = "dot"        // Period '.'
	COMMA      Kind = "comma"      // Comma ','
	SEMI       Kind = "semi"       // Semicolon ';'
	COLON      Kind = "colon"      // Colon ':'
	COLONCOLON Kind = "coloncolon" // Double colon '::'

	INLINECMT   Kind = "inlinecmt"   // Single-line comment '// ... \n'
	BLOCKCMT    Kind = "blockcmt"    // Multi-line comment '/* ... */'
	CLOSEINLINE Kind = "closeinline" // End of an inline comment '\n'
	CLOSEBLOCK  Kind = "closeblock"  // End of a block comment '*/'
	OPENINLINE  Kind = "openinline"  // Start of an inline comment '//'
	OPENBLOCK   Kind = "openblock"   // Start of a block comment '/*'

	ID       Kind = "id"       // Identifier 'exampleId_123'
	INTNUM   Kind = "intnum"   // Integer '123'
	FLOATNUM Kind = "floatnum" // Floating-point number '1.23'

	IF       Kind = "if"       // Reserved word 'if'
	THEN     Kind = "then"     // Reserved word 'then'
	ELSE     Kind = "else"     // Reserved word 'else'
	INTEGER  Kind = "integer"  // Reserved word 'integer'
	FLOAT    Kind = "float"    // Reserved word 'float'
	VOID     Kind = "void"     // Reserved word 'void'
	PUBLIC   Kind = "public"   // Reserved word 'public'
	PRIVATE  Kind = "private"  // Reserved word 'private'
	FUNC     Kind = "func"     // Reserved word 'func'
	VAR      Kind = "var"      // Reserved word 'var'
	STRUCT   Kind = "struct"   // Reserved word 'struct'
	WHILE    Kind = "while"    // Reserved word 'while'
	READ     Kind = "read"     // Reserved word 'read'
	WRITE    Kind = "write"    // Reserved word 'write'
	RETURN   Kind = "return"   // Reserved word 'return'
	SELF     Kind = "self"     // Reserved word 'self'
	INHERITS Kind = "inherits" // Reserved word 'inherits'
	LET      Kind = "let"      // Reserved word 'let'
	IMPL     Kind = "impl"     // Reserved word 'impl'

	INVALIDID           Kind = "invalidid"           // Error token
	INVALIDNUM          Kind = "invalidnum"          // Error token
	INVALIDCHAR         Kind = "invalidchar"         // Error token
	UNTERMINATEDCOMMENT Kind = "unterminatedcomment" // Error token
)

func Comments() []Kind {
	return []Kind{INLINECMT, BLOCKCMT, CLOSEBLOCK, CLOSEINLINE}
}

const (
	STATEMENT                         Kind = "<statement>"
	RELEXPR                           Kind = "<relExpr>"
	INDICE                            Kind = "<indice>"
	APARAMSTAIL                       Kind = "<aParamsTail>"
	VARDECL                           Kind = "<varDecl>"
	FPARAMS                           Kind = "<fParams>"
	REPT_VARDECL4                     Kind = "<rept-varDecl4>"
	ASSIGNOP                          Kind = "<assignOp>"
	FPARAMSTAIL                       Kind = "<fParamsTail>"
	REPT_IMPLDEF3                     Kind = "<rept-implDef3>"
	ASSIGNSTATORFUNCCALL_DISAMBIGUATE Kind = "<assignStatOrFuncCall-disambiguate>"
	VARORFUNCCALL                     Kind = "<varOrFuncCall>"
	VARORFUNCCALL_DISAMBIGUATE        Kind = "<varOrFuncCall-disambiguate>"
	ANOTHER                           Kind = "<another>"
	OPT_STRUCTDECL2                   Kind = "<opt-structDecl2>"
	FUNCTIONCALL                      Kind = "<functionCall>"
	REPT_FPARAMSTAIL4                 Kind = "<rept-fParamsTail4>"
	START                             Kind = "<START>"
	REPT_STRUCTDECL4                  Kind = "<rept-structDecl4>"
	VISIBILITY                        Kind = "<visibility>"
	FUNCHEAD                          Kind = "<funcHead>"
	TYPE                              Kind = "<type>"
	REPT_OPT_STRUCTDECL22             Kind = "<rept-opt-structDecl22>"
	RETURNTYPE                        Kind = "<returnType>"
	APARAMS                           Kind = "<aParams>"
	STRUCTORIMPLORFUNC                Kind = "<structOrImplOrFunc>"
	STRUCTDECL                        Kind = "<structDecl>"
	ARRAYSIZE                         Kind = "<arraySize>"
	FUNCDEF                           Kind = "<funcDef>"
	ASSIGNSTATORFUNCCALL              Kind = "<assignStatOrFuncCall>"
	REPT_STATBLOCK1                   Kind = "<rept-statBlock1>"
	FUNCBODY                          Kind = "<funcBody>"
	TERM                              Kind = "<term>"
	REPT_PROG0                        Kind = "<rept-prog0>"
	FUNCDECL                          Kind = "<funcDecl>"
	VARIABLE                          Kind = "<variable>"
	MORE_FUNC                         Kind = "<more-func>"
	ARITHORRELEXPR_DISAMBIGUATE       Kind = "<arithOrRelExpr-disambiguate>"
	RELOP                             Kind = "<relOp>"
	STATBLOCK                         Kind = "<statBlock>"
	RIGHTREC_TERM                     Kind = "<rightrec-term>"
	REPT_FPARAMS3                     Kind = "<rept-fParams3>"
	EXPR                              Kind = "<expr>"
	MORE_ASSIGN                       Kind = "<more-assign>"
	FACTOR                            Kind = "<factor>"
	REPT_FUNCBODY1                    Kind = "<rept-funcBody1>"
	VARDECLORSTAT                     Kind = "<varDeclOrStat>"
	SIGN                              Kind = "<sign>"
	ADDOP                             Kind = "<addOp>"
	REPT_APARAMS1                     Kind = "<rept-aParams1>"
	REPT_FPARAMS4                     Kind = "<rept-fParams4>"
	IMPLDEF                           Kind = "<implDef>"
	MORE_INDICE                       Kind = "<more-indice>"
	SOMETHING                         Kind = "<something>"
	SOMETHING_FUNC                    Kind = "<something-func>"
	ASSIGNSTAT                        Kind = "<assignStat>"
	ARRAYSIZE_FACTORIZED              Kind = "<arraySize-factorized>"
	PROG                              Kind = "<prog>"
	ARITHEXPR                         Kind = "<arithExpr>"
	MULTOP                            Kind = "<multOp>"
	MEMBERDECL                        Kind = "<memberDecl>"
	RIGHTREC_ARITHEXPR                Kind = "<rightrec-arithExpr>"
)

var nonterminals = NONTERMINALS()
var NONTERMINALS = func() KindSet {
	return KindSet{
		VARORFUNCCALL:                     {},
		VARORFUNCCALL_DISAMBIGUATE:        {},
		RELOP:                             {},
		FACTOR:                            {},
		ASSIGNSTAT:                        {},
		RELEXPR:                           {},
		REPT_STRUCTDECL4:                  {},
		MORE_INDICE:                       {},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: {},
		APARAMS:                           {},
		ASSIGNSTATORFUNCCALL:              {},
		RIGHTREC_TERM:                     {},
		REPT_APARAMS1:                     {},
		REPT_FPARAMS4:                     {},
		ARITHEXPR:                         {},
		REPT_VARDECL4:                     {},
		ANOTHER:                           {},
		RETURNTYPE:                        {},
		OPT_STRUCTDECL2:                   {},
		REPT_PROG0:                        {},
		FPARAMSTAIL:                       {},
		VISIBILITY:                        {},
		ARRAYSIZE:                         {},
		REPT_FPARAMS3:                     {},
		EXPR:                              {},
		ADDOP:                             {},
		MEMBERDECL:                        {},
		STATEMENT:                         {},
		REPT_FPARAMSTAIL4:                 {},
		STATBLOCK:                         {},
		SOMETHING_FUNC:                    {},
		MULTOP:                            {},
		FPARAMS:                           {},
		START:                             {},
		REPT_IMPLDEF3:                     {},
		FUNCDEF:                           {},
		REPT_FUNCBODY1:                    {},
		VARDECLORSTAT:                     {},
		FUNCTIONCALL:                      {},
		FUNCBODY:                          {},
		VARIABLE:                          {},
		ARITHORRELEXPR_DISAMBIGUATE:       {},
		SOMETHING:                         {},
		PROG:                              {},
		INDICE:                            {},
		APARAMSTAIL:                       {},
		ASSIGNOP:                          {},
		FUNCHEAD:                          {},
		TYPE:                              {},
		REPT_STATBLOCK1:                   {},
		FUNCDECL:                          {},
		SIGN:                              {},
		ARRAYSIZE_FACTORIZED:              {},
		RIGHTREC_ARITHEXPR:                {},
		REPT_OPT_STRUCTDECL22:             {},
		STRUCTDECL:                        {},
		TERM:                              {},
		VARDECL:                           {},
		IMPLDEF:                           {},
		MORE_FUNC:                         {},
		MORE_ASSIGN:                       {},
		STRUCTORIMPLORFUNC:                {},
	}
}

func IsNonterminal(symbol Kind) bool {
	_, ok := nonterminals[symbol]
	return ok
}

// SEMANTIC ACTIONS
const (
	SEM_FLOAT_MAKENODE         Kind = "(SEM-FLOAT-MAKENODE)"
	SEM_FACTOR_UP              Kind = "(SEM-FACTOR-UP)"
	SEM_FPARAM_LIST_MAKEFAMILY Kind = "(SEM-FPARAM-LIST-MAKEFAMILY)"
	SEM_STRUCT_DECL_MAKEFAMILY Kind = "(SEM-STRUCT-DECL-MAKEFAMILY)"
	SEM_FCALL_MAKENODE         Kind = "(SEM-FCALL-MAKENODE)"
	SEM_WRITE_MAKEFAMILY       Kind = "(SEM-WRITE-MAKEFAMILY)"
	SEM_MULT_MAKENODE          Kind = "(SEM-MULT-MAKENODE)"
	SEM_VAR_OR_FUNC_CALL_UP    Kind = "(SEM-VAR-OR-FUNC-CALL-UP)"
	SEM_RIGHTREC_TERM_EPSILON  Kind = "(SEM-RIGHTREC-TERM-EPSILON)"
	SEM_INTEGER_MAKENODE       Kind = "(SEM-INTEGER-MAKENODE)"
	SEM_MULT_MAKEFAMILY        Kind = "(SEM-MULT-MAKEFAMILY)"
	SEM_TYPE_MAKEFAMILY        Kind = "(SEM-TYPE-MAKEFAMILY)"
	SEM_REPT_PROG0_MAKEEPSILON Kind = "(SEM-REPT-PROG0-MAKEEPSILON)"
	SEM_IMPL_DEF_MAKEFAMILY    Kind = "(SEM-IMPL-DEF-MAKEFAMILY)"
	SEM_FPARAM_MAKEFAMILY      Kind = "(SEM-FPARAM-MAKEFAMILY)"
	SEM_PROG_MAKE_NODE         Kind = "(SEM-PROG-MAKE-NODE)"
	SEM_FUNC_DEF_MAKEFAMILY    Kind = "(SEM-FUNC-DEF-MAKEFAMILY)"
	SEM_REPT_PROG0_MAKESIBLING Kind = "(SEM-REPT-PROG0-MAKESIBLING)"
	SEM_ID_MAKENODE            Kind = "(SEM-ID-MAKENODE)"
	SEM_VOID_MAKENODE          Kind = "(SEM-VOID-MAKENODE)"
	SEM_FUNC_BODY_MAKEFAMILY   Kind = "(FUNC-BODY-MAKEFAMILY)"
	SEM_VAR_DECL_MAKEFAMILY    Kind = "(VAR-DECL-MAKEFAMILY)"
	SEM_STATEMENT_MAKEFAMILY   Kind = "(STATEMENT-MAKEFAMILY)"
	SEM_IF_MAKEFAMILY          Kind = "(IF-MAKEFAMILY)"
	SEM_WHILE_MAKEFAMILY       Kind = "(WHILE-MAKEFAMILY)"
	SEM_READ_MAKEFAMILY        Kind = "(READ-MAKEFAMILY)"
	SEM_RETURN_MAKEFAMILY      Kind = "(RETURN-MAKEFAMILY)"
	SEM_ASSIGN_MAKEFAMILY      Kind = "(ASSIGN-MAKEFAMILY)"
	SEM_FUNC_CALL_MAKEFAMILY   Kind = "(FUNC-CALL-MAKEFAMILY)"
	SEM_INTNUM_MAKENODE        Kind = "(INTNUM-MAKENODE)"
	SEM_FLOATNUM_MAKENODE      Kind = "(FLOATNUM-MAKENODE)"
	SEM_FACTOR_MAKENODE        Kind = "(FACTOR-MAKENODE)"
	SEM_TERM_MAKENODE          Kind = "(TERM-MAKENODE)"
	SEM_ARITH_EXPR_MAKENODE    Kind = "(ARITH-EXPR-MAKENODE)"
	SEM_EXPR_MAKENODE          Kind = "(EXPR-MAKENODE)"
)

var semActions = SEMANTIC_ACTIONS()
var SEMANTIC_ACTIONS = func() KindSet {
	return KindSet{
		SEM_VOID_MAKENODE:          {},
		SEM_FUNC_DEF_MAKEFAMILY:    {},
		SEM_ID_MAKENODE:            {},
		SEM_STRUCT_DECL_MAKEFAMILY: {},
		SEM_WRITE_MAKEFAMILY:       {},
		SEM_INTEGER_MAKENODE:       {},
		SEM_MULT_MAKEFAMILY:        {},
		SEM_TYPE_MAKEFAMILY:        {},
		SEM_FPARAM_LIST_MAKEFAMILY: {},
		SEM_FPARAM_MAKEFAMILY:      {},
		SEM_MULT_MAKENODE:          {},
		SEM_IMPL_DEF_MAKEFAMILY:    {},
		SEM_REPT_PROG0_MAKEEPSILON: {},
		SEM_PROG_MAKE_NODE:         {},
		SEM_REPT_PROG0_MAKESIBLING: {},
		SEM_FLOAT_MAKENODE:         {},
		SEM_FACTOR_UP:              {},
		SEM_FCALL_MAKENODE:         {},
		SEM_VAR_OR_FUNC_CALL_UP:    {},
		SEM_RIGHTREC_TERM_EPSILON:  {},
		SEM_FUNC_BODY_MAKEFAMILY:   {},
		SEM_VAR_DECL_MAKEFAMILY:    {},
		SEM_STATEMENT_MAKEFAMILY:   {},
		SEM_IF_MAKEFAMILY:          {},
		SEM_WHILE_MAKEFAMILY:       {},
		SEM_READ_MAKEFAMILY:        {},
		SEM_RETURN_MAKEFAMILY:      {},
		SEM_ASSIGN_MAKEFAMILY:      {},
		SEM_FUNC_CALL_MAKEFAMILY:   {},
		SEM_INTNUM_MAKENODE:        {},
		SEM_FLOATNUM_MAKENODE:      {},
		SEM_FACTOR_MAKENODE:        {},
		SEM_TERM_MAKENODE:          {},
		SEM_ARITH_EXPR_MAKENODE:    {},
		SEM_EXPR_MAKENODE:          {},
	}
}

func IsSemAction(symbol Kind) bool {
	_, ok := semActions[symbol]
	return ok
}

// Final AST constructs
const (
	FINAL_PROG                        Kind = "Prog"
	FINAL_STRUCT_OR_IMPL_OR_FUNC_LIST Kind = "StructOrImplOrFuncList"
	FINAL_FUNC_DEF                    Kind = "FuncDef"
	FINAL_STRUCT_DECL                 Kind = "StructDecl"
	FINAL_IMPL_DEF                    Kind = "ImplDef"

	FINAL_TYPE    Kind = "Type"
	FINAL_ID      Kind = "ID"
	FINAL_VOID    Kind = "Void"
	FINAL_INTEGER Kind = "Integer"
	FINAL_FLOAT   Kind = "Float"

	FINAL_INTNUM   Kind = "IntNum"
	FINAL_FLOATNUM Kind = "FloatNum"

	FINAL_FPARAM      Kind = "Param"
	FINAL_FPARAM_LIST Kind = "ParamList"

	FINAL_STAT_BLOCK Kind = "StatBlock"

	// The difference between FINAL_FUNC_BODY and FINAL_STAT_BLOCK is that
	// function bodies can contain both variable declaration as well as
	// statements whereas statement blocks may only contain statements
	FINAL_FUNC_BODY Kind = "Body"

	FINAL_VAR_DECL  Kind = "VarDecl"
	FINAL_STATEMENT Kind = "Statement"

	FINAL_WRITE  Kind = "Write"
	FINAL_IF     Kind = "If"
	FINAL_WHILE  Kind = "While"
	FINAL_READ   Kind = "Read"
	FINAL_RETURN Kind = "Return"

	FINAL_ASSIGN    Kind = "Assign"
	FINAL_FUNC_CALL Kind = "FuncCall"

	FINAL_EXPR       Kind = "Expr"
	FINAL_ARITH_EXPR Kind = "ArithExpr"
	FINAL_FACTOR     Kind = "Factor"
	FINAL_TERM       Kind = "Term"
)

// Default action is to pop, change type, and repush
var SEM_DISPATCH = map[Kind]SemanticAction{

	SEM_ASSIGN_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: replace this with the real deal
		panic("not implemented")
	},

	SEM_FUNC_CALL_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: replace this with the real deal
		panic("not implemented")
	},

	SEM_VAR_DECL_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: replace this with the real deal
		panic("not implemented")
	},

	SEM_EXPR_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		wrapTop(
			FINAL_EXPR, semanticStack,
			FINAL_ARITH_EXPR)
	},

	SEM_ARITH_EXPR_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		wrapTop(
			FINAL_ARITH_EXPR, semanticStack,
			FINAL_TERM)
	},

	SEM_INTNUM_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		pushNode(FINAL_INTNUM, tok, semanticStack)
	},

	SEM_FLOATNUM_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		pushNode(FLOATNUM, tok, semanticStack)
	},

	SEM_TERM_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		wrapTop(
			FINAL_TERM, semanticStack,
			FINAL_FACTOR)
	},

	SEM_FACTOR_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		wrapTop(
			FINAL_FACTOR, semanticStack,
			FINAL_INTNUM, FINAL_FLOATNUM)
	},

	SEM_STATEMENT_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		wrapTop(
			FINAL_STATEMENT, semanticStack,
			FINAL_ASSIGN, FINAL_FUNC_CALL,
			FINAL_WRITE, FINAL_IF,
			FINAL_WHILE, FINAL_READ,
			FINAL_RETURN)
	},

	SEM_FUNC_BODY_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		listMergeTopTwo(semanticStack, FINAL_FUNC_BODY, FINAL_VAR_DECL, FINAL_STATEMENT)
	},

	SEM_INTEGER_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		pushNode(FINAL_INTEGER, tok, semanticStack)
	},

	// Makes a function definition subtree
	SEM_FUNC_DEF_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		eat := 4
		lengthOrPanic(eat, semanticStack)

		top, second, third, fourth := topFour(semanticStack)
		typeCheck(fourth, FINAL_ID)
		typeCheck(third, FINAL_FPARAM_LIST)
		typeCheck(second, FINAL_TYPE)
		typeCheck(top, FINAL_FUNC_BODY)

		trimAndSet(eat, semanticStack, &ASTNode{Type: FINAL_FUNC_DEF})
	},

	SEM_MULT_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_MULT_MAKENODE
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_MULT_MAKENODE,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	SEM_STRUCT_DECL_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_STRUCT_DECL_MAKEFAMILY
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_STRUCT_DECL_MAKEFAMILY,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	SEM_IMPL_DEF_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_IMPL_DEF_MAKEFAMILY
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_IMPL_DEF_MAKEFAMILY,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	SEM_VAR_OR_FUNC_CALL_UP: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_VAR_OR_FUNC_CALL_UP
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_VAR_OR_FUNC_CALL_UP,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	SEM_MULT_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_MULT_MAKEFAMILY
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_MULT_MAKEFAMILY,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	SEM_RIGHTREC_TERM_EPSILON: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_RIGHTREC_TERM_EPSILON
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_RIGHTREC_TERM_EPSILON,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	SEM_ID_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		pushNode(FINAL_ID, tok, semanticStack)
	},

	SEM_REPT_PROG0_MAKESIBLING: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		listMergeTopTwo(
			semanticStack,
			FINAL_STRUCT_OR_IMPL_OR_FUNC_LIST,
			FINAL_FUNC_DEF, FINAL_IMPL_DEF, FINAL_STRUCT_DECL)
	},

	SEM_WRITE_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		wrapTop(FINAL_WRITE, semanticStack, FINAL_EXPR)
	},

	SEM_FCALL_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_FCALL_MAKENODE
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_FCALL_MAKENODE,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	// When this action is called, stack should look like:
	// [FINAL_STRUCT_OR_IMPL_OR_FUNC_LIST]
	SEM_PROG_MAKE_NODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		l := len(*semanticStack)
		if l != 1 {
			panic(fmt.Errorf(
				"expected stack to be [FINAL_STRUCT_OR_IMPL_OR_FUNC_LIST] but got %v",
				*semanticStack))
		}

		top := (*semanticStack)[l-1]
		if top.Type != FINAL_STRUCT_OR_IMPL_OR_FUNC_LIST {
			panic(fmt.Errorf(
				"expected stack to be [FINAL_STRUCT_OR_IMPL_OR_FUNC_LIST] but got %v",
				*semanticStack))
		}

		node := &ASTNode{
			Type:     FINAL_PROG,
			Children: []*ASTNode{top},
		}
		(*semanticStack)[l-1] = node
	},

	SEM_FACTOR_UP: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// // TODO: fill in function stub...
		// if l := len(*semanticStack); l > 0 {
		// 	// Modify the top of the stack
		// 	(*semanticStack)[l-1].Type = SEM_FACTOR_UP
		// } else {
		// 	// Or make a new node
		// 	node := &ASTNode{
		// 		Type:  SEM_FACTOR_UP,
		// 		Token: tok,
		// 	}
		// 	*semanticStack = append(*semanticStack, node)
		// }
	},

	SEM_FLOAT_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		pushNode(FINAL_FLOAT, tok, semanticStack)
	},

	SEM_REPT_PROG0_MAKEEPSILON: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		// TODO: fill in function stub...
		if l := len(*semanticStack); l > 0 {
			// Modify the top of the stack
			(*semanticStack)[l-1].Type = SEM_REPT_PROG0_MAKEEPSILON
		} else {
			// Or make a new node
			node := &ASTNode{
				Type:  SEM_REPT_PROG0_MAKEEPSILON,
				Token: tok,
			}
			*semanticStack = append(*semanticStack, node)
		}
	},

	SEM_VOID_MAKENODE: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		pushNode(FINAL_VOID, tok, semanticStack)
	},

	SEM_TYPE_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		wrapTop(
			FINAL_TYPE, semanticStack,
			FINAL_INTEGER, FINAL_FLOAT, FINAL_ID, FINAL_VOID)
	},

	// This function has to create or prepend to a list. The stack should look
	// like (... = anything):
	//
	// [..., FINAL_FPARAM_LIST, FINAL_FPARAM ]
	// 		Then merge the top two nodes
	//
	// [..., FINAL_FPARAM]
	// 		Then create a new list containing the top
	SEM_FPARAM_LIST_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		listMergeTopTwo(semanticStack, FINAL_FPARAM_LIST, FINAL_FPARAM)
	},

	// Grabs the top 2 records on the stack
	SEM_FPARAM_MAKEFAMILY: func(action Kind, tok Token, semanticStack *[]*ASTNode) {
		eat := 2
		lengthOrPanic(eat, semanticStack)
		top, second := topTwo(semanticStack)
		typeCheck(second, FINAL_ID)
		typeCheck(top, FINAL_TYPE)
		trimAndSet(eat, semanticStack, &ASTNode{Type: FINAL_FPARAM})
	},
}

// Wraps the node at the top of the stack
func wrapTop(typee Kind, stack *[]*ASTNode, acceptableTopType ...Kind) {
	l := lengthOrPanic(1, stack)
	top := top(stack)
	typeCheck(top, acceptableTopType...)
	(*stack)[l-1] = &ASTNode{
		Type:     typee,
		Children: []*ASTNode{top},
	}
}

// Pushed a leaf node onto the stack
func pushNode(typee Kind, tok Token, stack *[]*ASTNode) {
	*stack = append(*stack, &ASTNode{
		Type:  typee,
		Token: tok,
	})
}

// Merges the top two nodes into a list, or creates a list if there is not
// already a list
func listMergeTopTwo(stack *[]*ASTNode, secondTopType Kind, topTypes ...Kind) {
	l := lengthOrPanic(1, stack)

	t := top(stack)
	if typeCheckNoPanic(t, topTypes...) != nil {
		if typeCheckNoPanic(t, secondTopType) != nil {
			// Then we need to place an empty list on top
			*stack = append(*stack, &ASTNode{
				Type:     secondTopType,
				Children: []*ASTNode{},
			})
		}
		return
	}

	*stack = (*stack)[:l-1]

	if l >= 2 {
		tt := top(stack)
		if tt.Type == secondTopType {
			tt.Children = append(tt.Children, t)
			return
		}
	}

	// Otherwise, make a new list
	*stack = append(*stack, &ASTNode{
		Type:     secondTopType,
		Children: []*ASTNode{t},
	})
}

// Consumes the top n nodes and replaces them with a single node
func trimAndSet(n int, stack *[]*ASTNode, newTop *ASTNode) {
	l := len(*stack)
	newTop.Children = append(newTop.Children, (*stack)[l-n:]...)
	(*stack)[l-n] = newTop
	*stack = (*stack)[:l-n+1]
}

func typeCheckNoPanic(record *ASTNode, acceptableTypes ...Kind) error {
	acceptable := false
	for _, t := range acceptableTypes {
		if record.Type == t {
			acceptable = true
		}
	}
	if !acceptable {
		return fmt.Errorf(
			"record should be of type %v but got %v",
			acceptableTypes, record.Type)
	}
	return nil
}

func typeCheck(record *ASTNode, acceptableTypes ...Kind) {
	check(typeCheckNoPanic(record, acceptableTypes...))
}

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func top(stack *[]*ASTNode) *ASTNode {
	return (*stack)[len(*stack)-1]
}

func topTwo(stack *[]*ASTNode) (top *ASTNode, second *ASTNode) {
	return (*stack)[len(*stack)-1],
		(*stack)[len(*stack)-2]
}

func topThree(stack *[]*ASTNode) (top *ASTNode, second *ASTNode, third *ASTNode) {
	return (*stack)[len(*stack)-1],
		(*stack)[len(*stack)-2],
		(*stack)[len(*stack)-3]
}

func topFour(stack *[]*ASTNode) (
	top *ASTNode,
	second *ASTNode,
	third *ASTNode,
	fourth *ASTNode,
) {
	return (*stack)[len(*stack)-1],
		(*stack)[len(*stack)-2],
		(*stack)[len(*stack)-3],
		(*stack)[len(*stack)-4]
}

func lengthOrPanic(desiredLength int, stack *[]*ASTNode) int {
	l := len(*stack)
	if l < desiredLength {
		panic(fmt.Errorf(
			"expected stack to be %v elements, but was %v. Here is the stack: %v",
			desiredLength, l, *stack))
	}
	return l
}

var terminals = TERMINALS()
var TERMINALS = func() KindSet {
	return KindSet{
		EPSILON:   {},
		OPENPAR:   {},
		CLOSEPAR:  {},
		OPENCUBR:  {},
		CLOSECUBR: {},
		OPENSQBR:  {},
		CLOSESQBR: {},
		AND:       {},
		FLOAT:     {},
		DIV:       {},
		PUBLIC:    {},
		ELSE:      {},
		INTEGER:   {},
		INTNUM:    {},
		WHILE:     {},
		ID:        {},
		EQ:        {},
		VOID:      {},
		COMMA:     {},
		LET:       {},
		MULT:      {},
		SEMI:      {},
		THEN:      {},
		STRUCT:    {},
		FLOATNUM:  {},
		WRITE:     {},
		GT:        {},
		PLUS:      {},
		IMPL:      {},
		MINUS:     {},
		ASSIGN:    {},
		LEQ:       {},
		OR:        {},
		PRIVATE:   {},
		IF:        {},
		COLON:     {},
		NOTEQ:     {},
		LT:        {},
		DOT:       {},
		GEQ:       {},
		READ:      {},
		RETURN:    {},
		NOT:       {},
		INHERITS:  {},
		FUNC:      {},
		ARROW:     {},
	}
}

func IsTerminal(symbol Kind) bool {
	_, ok := terminals[symbol]
	return ok
}

// Returns a printout of the rules
func RulesToString(rules Rules) string {
	ret := ""
	for _, v := range rules {
		for _, r := range v {
			rhs := make([]string, 0, len(r.RHS))
			for _, k := range r.RHS {
				rhs = append(rhs, string(k))
			}
			ret += fmt.Sprintf("%v ::= %v\n", r.LHS, strings.Join(rhs, " "))
		}
	}
	return ret
}

var rules = RULES()
var RULES = func() Rules {
	return Rules{
		OPT_STRUCTDECL2:             []Rule{{OPT_STRUCTDECL2, []Kind{INHERITS, ID, SEM_ID_MAKENODE, REPT_OPT_STRUCTDECL22}}, {OPT_STRUCTDECL2, []Kind{EPSILON}}},
		FUNCDEF:                     []Rule{{FUNCDEF, []Kind{FUNCHEAD, FUNCBODY}}},
		MORE_FUNC:                   []Rule{{MORE_FUNC, []Kind{DOT, ASSIGNSTATORFUNCCALL}}, {MORE_FUNC, []Kind{SEMI, SEM_FUNC_CALL_MAKEFAMILY}}},
		VARIABLE:                    []Rule{{VARIABLE, []Kind{ID, SEM_ID_MAKENODE, MORE_INDICE, SOMETHING}}},
		SOMETHING:                   []Rule{{SOMETHING, []Kind{DOT, VARORFUNCCALL, ID, SEM_ID_MAKENODE, MORE_INDICE}}, {SOMETHING, []Kind{EPSILON}}},
		APARAMS:                     []Rule{{APARAMS, []Kind{EXPR, REPT_APARAMS1}}, {APARAMS, []Kind{EPSILON}}},
		MULTOP:                      []Rule{{MULTOP, []Kind{MULT, SEM_MULT_MAKENODE}}, {MULTOP, []Kind{DIV, SEM_MULT_MAKENODE}}, {MULTOP, []Kind{AND, SEM_MULT_MAKENODE}}},
		REPT_FUNCBODY1:              []Rule{{REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}}, {REPT_FUNCBODY1, []Kind{EPSILON, SEM_FUNC_BODY_MAKEFAMILY}}},
		REPT_VARDECL4:               []Rule{{REPT_VARDECL4, []Kind{ARRAYSIZE, REPT_VARDECL4}}, {REPT_VARDECL4, []Kind{EPSILON}}},
		RELOP:                       []Rule{{RELOP, []Kind{EQ}}, {RELOP, []Kind{NOTEQ}}, {RELOP, []Kind{LT}}, {RELOP, []Kind{GT}}, {RELOP, []Kind{LEQ}}, {RELOP, []Kind{GEQ}}},
		REPT_STRUCTDECL4:            []Rule{{REPT_STRUCTDECL4, []Kind{VISIBILITY, MEMBERDECL, REPT_STRUCTDECL4}}, {REPT_STRUCTDECL4, []Kind{EPSILON}}},
		VARDECLORSTAT:               []Rule{{VARDECLORSTAT, []Kind{VARDECL, SEM_VAR_DECL_MAKEFAMILY}}, {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}}},
		REPT_APARAMS1:               []Rule{{REPT_APARAMS1, []Kind{APARAMSTAIL, REPT_APARAMS1}}, {REPT_APARAMS1, []Kind{EPSILON}}},
		MEMBERDECL:                  []Rule{{MEMBERDECL, []Kind{FUNCDECL}}, {MEMBERDECL, []Kind{VARDECL}}},
		VARORFUNCCALL:               []Rule{{VARORFUNCCALL, []Kind{ID, SEM_ID_MAKENODE, VARORFUNCCALL_DISAMBIGUATE, SEM_VAR_OR_FUNC_CALL_UP}}},
		SOMETHING_FUNC:              []Rule{{SOMETHING_FUNC, []Kind{DOT, VARORFUNCCALL, ID, SEM_ID_MAKENODE, OPENPAR, APARAMS, CLOSEPAR}}, {SOMETHING_FUNC, []Kind{EPSILON}}},
		REPT_OPT_STRUCTDECL22:       []Rule{{REPT_OPT_STRUCTDECL22, []Kind{COMMA, ID, SEM_ID_MAKENODE, REPT_OPT_STRUCTDECL22}}, {REPT_OPT_STRUCTDECL22, []Kind{EPSILON}}},
		RELEXPR:                     []Rule{{RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}}},
		RIGHTREC_ARITHEXPR:          []Rule{{RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, RIGHTREC_ARITHEXPR}}, {RIGHTREC_ARITHEXPR, []Kind{EPSILON}}},
		RETURNTYPE:                  []Rule{{RETURNTYPE, []Kind{TYPE}}, {RETURNTYPE, []Kind{VOID, SEM_VOID_MAKENODE, SEM_TYPE_MAKEFAMILY}}},
		FPARAMS:                     []Rule{{FPARAMS, []Kind{ID, SEM_ID_MAKENODE, COLON, TYPE, SEM_TYPE_MAKEFAMILY, REPT_FPARAMS3, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY, REPT_FPARAMS4}}, {FPARAMS, []Kind{EPSILON, SEM_FPARAM_LIST_MAKEFAMILY}}},
		FPARAMSTAIL:                 []Rule{{FPARAMSTAIL, []Kind{COMMA, ID, SEM_ID_MAKENODE, COLON, TYPE, SEM_TYPE_MAKEFAMILY, REPT_FPARAMSTAIL4, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY}}},
		ASSIGNOP:                    []Rule{{ASSIGNOP, []Kind{ASSIGN}}},
		ADDOP:                       []Rule{{ADDOP, []Kind{PLUS}}, {ADDOP, []Kind{MINUS}}, {ADDOP, []Kind{OR}}},
		ANOTHER:                     []Rule{{ANOTHER, []Kind{DOT, VARORFUNCCALL}}, {ANOTHER, []Kind{EPSILON}}},
		FUNCTIONCALL:                []Rule{{FUNCTIONCALL, []Kind{ID, SEM_ID_MAKENODE, OPENPAR, APARAMS, CLOSEPAR, SOMETHING_FUNC}}},
		SIGN:                        []Rule{{SIGN, []Kind{PLUS}}, {SIGN, []Kind{MINUS}}},
		REPT_FPARAMS3:               []Rule{{REPT_FPARAMS3, []Kind{ARRAYSIZE, REPT_FPARAMS3}}, {REPT_FPARAMS3, []Kind{EPSILON}}},
		REPT_IMPLDEF3:               []Rule{{REPT_IMPLDEF3, []Kind{FUNCDEF, REPT_IMPLDEF3}}, {REPT_IMPLDEF3, []Kind{EPSILON}}},
		FUNCHEAD:                    []Rule{{FUNCHEAD, []Kind{FUNC, ID, SEM_ID_MAKENODE, OPENPAR, FPARAMS, CLOSEPAR, ARROW, RETURNTYPE}}},
		ASSIGNSTATORFUNCCALL:        []Rule{{ASSIGNSTATORFUNCCALL, []Kind{ID, SEM_ID_MAKENODE, ASSIGNSTATORFUNCCALL_DISAMBIGUATE}}},
		INDICE:                      []Rule{{INDICE, []Kind{OPENSQBR, ARITHEXPR, CLOSESQBR}}},
		VARORFUNCCALL_DISAMBIGUATE:  []Rule{{VARORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FCALL_MAKENODE, ANOTHER}}, {VARORFUNCCALL_DISAMBIGUATE, []Kind{INDICE, MORE_INDICE, ANOTHER}}, {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}}},
		REPT_PROG0:                  []Rule{{REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}}, {REPT_PROG0, []Kind{EPSILON, SEM_REPT_PROG0_MAKEEPSILON}}},
		STRUCTORIMPLORFUNC:          []Rule{{STRUCTORIMPLORFUNC, []Kind{STRUCTDECL, SEM_STRUCT_DECL_MAKEFAMILY}}, {STRUCTORIMPLORFUNC, []Kind{IMPLDEF, SEM_IMPL_DEF_MAKEFAMILY}}, {STRUCTORIMPLORFUNC, []Kind{FUNCDEF, SEM_FUNC_DEF_MAKEFAMILY}}},
		STRUCTDECL:                  []Rule{{STRUCTDECL, []Kind{STRUCT, ID, SEM_ID_MAKENODE, OPT_STRUCTDECL2, OPENCUBR, REPT_STRUCTDECL4, CLOSECUBR, SEMI}}},
		ARRAYSIZE_FACTORIZED:        []Rule{{ARRAYSIZE_FACTORIZED, []Kind{CLOSESQBR}}, {ARRAYSIZE_FACTORIZED, []Kind{INTNUM, CLOSESQBR}}},
		TYPE:                        []Rule{{TYPE, []Kind{INTEGER, SEM_INTEGER_MAKENODE}}, {TYPE, []Kind{FLOAT, SEM_FLOAT_MAKENODE}}, {TYPE, []Kind{ID, SEM_ID_MAKENODE}}},
		FUNCBODY:                    []Rule{{FUNCBODY, []Kind{OPENCUBR, REPT_FUNCBODY1, CLOSECUBR}}},
		VARDECL:                     []Rule{{VARDECL, []Kind{LET, ID, SEM_ID_MAKENODE, COLON, TYPE, REPT_VARDECL4, SEMI}}},
		MORE_ASSIGN:                 []Rule{{MORE_ASSIGN, []Kind{DOT, ASSIGNSTATORFUNCCALL}}, {MORE_ASSIGN, []Kind{ASSIGNOP, EXPR, SEMI, SEM_ASSIGN_MAKEFAMILY}}},
		MORE_INDICE:                 []Rule{{MORE_INDICE, []Kind{INDICE, MORE_INDICE}}, {MORE_INDICE, []Kind{EPSILON}}},
		TERM:                        []Rule{{TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}}},
		APARAMSTAIL:                 []Rule{{APARAMSTAIL, []Kind{COMMA, EXPR}}},
		ARITHORRELEXPR_DISAMBIGUATE: []Rule{{ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR}}, {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON, SEM_EXPR_MAKENODE}}},
		REPT_FPARAMS4:               []Rule{{REPT_FPARAMS4, []Kind{FPARAMSTAIL, REPT_FPARAMS4}}, {REPT_FPARAMS4, []Kind{EPSILON}}},
		FUNCDECL:                    []Rule{{FUNCDECL, []Kind{FUNCHEAD, SEMI}}},
		STATEMENT: []Rule{
			{STATEMENT, []Kind{ASSIGNSTATORFUNCCALL}},
			{STATEMENT, []Kind{IF, OPENPAR, RELEXPR, CLOSEPAR, THEN, STATBLOCK, ELSE, STATBLOCK, SEMI, SEM_IF_MAKEFAMILY}},
			{STATEMENT, []Kind{WHILE, OPENPAR, RELEXPR, CLOSEPAR, STATBLOCK, SEMI, SEM_WHILE_MAKEFAMILY}},
			{STATEMENT, []Kind{READ, OPENPAR, VARIABLE, CLOSEPAR, SEMI, SEM_READ_MAKEFAMILY}},
			{STATEMENT, []Kind{WRITE, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_WRITE_MAKEFAMILY}},
			{STATEMENT, []Kind{RETURN, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_RETURN_MAKEFAMILY}}},
		STATBLOCK:                         []Rule{{STATBLOCK, []Kind{OPENCUBR, REPT_STATBLOCK1, CLOSECUBR}}, {STATBLOCK, []Kind{STATEMENT}}, {STATBLOCK, []Kind{EPSILON}}},
		REPT_STATBLOCK1:                   []Rule{{REPT_STATBLOCK1, []Kind{STATEMENT, REPT_STATBLOCK1}}, {REPT_STATBLOCK1, []Kind{EPSILON}}},
		EXPR:                              []Rule{{EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}}},
		RIGHTREC_TERM:                     []Rule{{RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULT_MAKEFAMILY, RIGHTREC_TERM}}, {RIGHTREC_TERM, []Kind{EPSILON, SEM_RIGHTREC_TERM_EPSILON}}},
		ARRAYSIZE:                         []Rule{{ARRAYSIZE, []Kind{OPENSQBR, ARRAYSIZE_FACTORIZED}}},
		IMPLDEF:                           []Rule{{IMPLDEF, []Kind{IMPL, ID, SEM_ID_MAKENODE, OPENCUBR, REPT_IMPLDEF3, CLOSECUBR}}},
		VISIBILITY:                        []Rule{{VISIBILITY, []Kind{PUBLIC}}, {VISIBILITY, []Kind{PRIVATE}}},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: []Rule{{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{INDICE, MORE_INDICE, MORE_ASSIGN}}, {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, MORE_FUNC}}, {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{MORE_ASSIGN}}},
		FACTOR:                            []Rule{{FACTOR, []Kind{VARORFUNCCALL, SEM_FACTOR_UP}}, {FACTOR, []Kind{INTNUM, SEM_INTNUM_MAKENODE}}, {FACTOR, []Kind{FLOATNUM, SEM_FLOATNUM_MAKENODE}}, {FACTOR, []Kind{OPENPAR, ARITHEXPR, CLOSEPAR}}, {FACTOR, []Kind{NOT, FACTOR}}, {FACTOR, []Kind{SIGN, FACTOR}}},
		ASSIGNSTAT:                        []Rule{{ASSIGNSTAT, []Kind{VARIABLE, ASSIGNOP, EXPR}}},
		ARITHEXPR:                         []Rule{{ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}}},
		START:                             []Rule{{START, []Kind{PROG}}},
		PROG:                              []Rule{{PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}}},
		REPT_FPARAMSTAIL4:                 []Rule{{REPT_FPARAMSTAIL4, []Kind{ARRAYSIZE, REPT_FPARAMSTAIL4}}, {REPT_FPARAMSTAIL4, []Kind{EPSILON}}},
	}
}

var FIRSTS = func() map[Kind]KindSet {
	return map[Kind]KindSet{
		FUNCTIONCALL:                      {ID: {}},
		FACTOR:                            {ID: {}, INTNUM: {}, FLOATNUM: {}, OPENPAR: {}, NOT: {}, PLUS: {}, MINUS: {}},
		GEQ:                               {GEQ: {}},
		CLOSECUBR:                         {CLOSECUBR: {}},
		REPT_FPARAMS3:                     {OPENSQBR: {}, EPSILON: {}},
		COMMA:                             {COMMA: {}},
		STRUCTORIMPLORFUNC:                {STRUCT: {}, IMPL: {}, FUNC: {}},
		ASSIGNOP:                          {ASSIGN: {}},
		IF:                                {IF: {}},
		WHILE:                             {WHILE: {}},
		EXPR:                              {NOT: {}, PLUS: {}, MINUS: {}, ID: {}, INTNUM: {}, FLOATNUM: {}, OPENPAR: {}},
		ARITHEXPR:                         {ID: {}, INTNUM: {}, FLOATNUM: {}, OPENPAR: {}, NOT: {}, PLUS: {}, MINUS: {}},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: {OPENSQBR: {}, OPENPAR: {}, DOT: {}, ASSIGN: {}},
		PUBLIC:                            {PUBLIC: {}},
		TYPE:                              {ID: {}, INTEGER: {}, FLOAT: {}},
		ARRAYSIZE:                         {OPENSQBR: {}},
		REPT_VARDECL4:                     {OPENSQBR: {}, EPSILON: {}},
		LEQ:                               {LEQ: {}},
		THEN:                              {THEN: {}},
		OPENSQBR:                          {OPENSQBR: {}},
		PLUS:                              {PLUS: {}},
		ELSE:                              {ELSE: {}},
		FUNCBODY:                          {OPENCUBR: {}},
		RIGHTREC_ARITHEXPR:                {PLUS: {}, MINUS: {}, OR: {}, EPSILON: {}},
		RELEXPR:                           {PLUS: {}, MINUS: {}, ID: {}, INTNUM: {}, FLOATNUM: {}, OPENPAR: {}, NOT: {}},
		DOT:                               {DOT: {}},
		COLON:                             {COLON: {}},
		FUNCHEAD:                          {FUNC: {}},
		IMPLDEF:                           {IMPL: {}},
		OR:                                {OR: {}},
		RETURN:                            {RETURN: {}},
		REPT_PROG0:                        {STRUCT: {}, IMPL: {}, FUNC: {}, EPSILON: {}},
		FUNCDECL:                          {FUNC: {}},
		SIGN:                              {PLUS: {}, MINUS: {}},
		VARORFUNCCALL_DISAMBIGUATE:        {OPENPAR: {}, OPENSQBR: {}, DOT: {}, EPSILON: {}},
		CLOSESQBR:                         {CLOSESQBR: {}},
		FLOATNUM:                          {FLOATNUM: {}},
		RETURNTYPE:                        {ID: {}, VOID: {}, INTEGER: {}, FLOAT: {}},
		MORE_FUNC:                         {SEMI: {}, DOT: {}},
		ASSIGNSTAT:                        {ID: {}},
		VARDECL:                           {LET: {}},
		EPSILON:                           {EPSILON: {}},
		VOID:                              {VOID: {}},
		TERM:                              {ID: {}, INTNUM: {}, FLOATNUM: {}, OPENPAR: {}, NOT: {}, PLUS: {}, MINUS: {}},
		STATBLOCK:                         {EPSILON: {}, OPENCUBR: {}, ID: {}, IF: {}, WHILE: {}, READ: {}, WRITE: {}, RETURN: {}},
		AND:                               {AND: {}},
		LET:                               {LET: {}},
		MULT:                              {MULT: {}},
		ARROW:                             {ARROW: {}},
		SEMI:                              {SEMI: {}},
		STRUCTDECL:                        {STRUCT: {}},
		REPT_FUNCBODY1:                    {IF: {}, WHILE: {}, READ: {}, WRITE: {}, RETURN: {}, EPSILON: {}, LET: {}, ID: {}},
		SOMETHING:                         {DOT: {}, EPSILON: {}},
		MEMBERDECL:                        {FUNC: {}, LET: {}},
		APARAMSTAIL:                       {COMMA: {}},
		ASSIGNSTATORFUNCCALL:              {ID: {}},
		NOTEQ:                             {NOTEQ: {}},
		START:                             {STRUCT: {}, IMPL: {}, FUNC: {}, EPSILON: {}},
		FUNCDEF:                           {FUNC: {}},
		MORE_ASSIGN:                       {DOT: {}, ASSIGN: {}},
		VARDECLORSTAT:                     {LET: {}, ID: {}, IF: {}, WHILE: {}, READ: {}, WRITE: {}, RETURN: {}},
		REPT_FPARAMS4:                     {COMMA: {}, EPSILON: {}},
		REPT_FPARAMSTAIL4:                 {OPENSQBR: {}, EPSILON: {}},
		RELOP:                             {NOTEQ: {}, LT: {}, GT: {}, LEQ: {}, GEQ: {}, EQ: {}},
		LT:                                {LT: {}},
		FUNC:                              {FUNC: {}},
		OPENPAR:                           {OPENPAR: {}},
		ANOTHER:                           {DOT: {}, EPSILON: {}},
		OPT_STRUCTDECL2:                   {INHERITS: {}, EPSILON: {}},
		VISIBILITY:                        {PUBLIC: {}, PRIVATE: {}},
		REPT_OPT_STRUCTDECL22:             {COMMA: {}, EPSILON: {}},
		MULTOP:                            {AND: {}, MULT: {}, DIV: {}},
		STATEMENT:                         {IF: {}, WHILE: {}, READ: {}, WRITE: {}, RETURN: {}, ID: {}},
		REPT_STRUCTDECL4:                  {PUBLIC: {}, PRIVATE: {}, EPSILON: {}},
		MORE_INDICE:                       {OPENSQBR: {}, EPSILON: {}},
		EQ:                                {EQ: {}},
		APARAMS:                           {EPSILON: {}, ID: {}, INTNUM: {}, FLOATNUM: {}, OPENPAR: {}, NOT: {}, PLUS: {}, MINUS: {}},
		VARIABLE:                          {ID: {}},
		OPENCUBR:                          {OPENCUBR: {}},
		INTEGER:                           {INTEGER: {}},
		ID:                                {ID: {}},
		RIGHTREC_TERM:                     {EPSILON: {}, MULT: {}, DIV: {}, AND: {}},
		REPT_APARAMS1:                     {EPSILON: {}, COMMA: {}},
		IMPL:                              {IMPL: {}},
		STRUCT:                            {STRUCT: {}},
		REPT_STATBLOCK1:                   {ID: {}, IF: {}, WHILE: {}, READ: {}, WRITE: {}, RETURN: {}, EPSILON: {}},
		FLOAT:                             {FLOAT: {}},
		READ:                              {READ: {}},
		ADDOP:                             {PLUS: {}, MINUS: {}, OR: {}},
		INDICE:                            {OPENSQBR: {}},
		MINUS:                             {MINUS: {}},
		INHERITS:                          {INHERITS: {}},
		DIV:                               {DIV: {}},
		VARORFUNCCALL:                     {ID: {}},
		CLOSEPAR:                          {CLOSEPAR: {}},
		FPARAMS:                           {ID: {}, EPSILON: {}},
		PROG:                              {FUNC: {}, EPSILON: {}, STRUCT: {}, IMPL: {}},
		NOT:                               {NOT: {}},
		ARITHORRELEXPR_DISAMBIGUATE:       {GEQ: {}, EPSILON: {}, EQ: {}, NOTEQ: {}, LT: {}, GT: {}, LEQ: {}},
		INTNUM:                            {INTNUM: {}},
		WRITE:                             {WRITE: {}},
		FPARAMSTAIL:                       {COMMA: {}},
		ASSIGN:                            {ASSIGN: {}},
		SOMETHING_FUNC:                    {DOT: {}, EPSILON: {}},
		ARRAYSIZE_FACTORIZED:              {CLOSESQBR: {}, INTNUM: {}},
		REPT_IMPLDEF3:                     {EPSILON: {}, FUNC: {}},
		GT:                                {GT: {}},
		PRIVATE:                           {PRIVATE: {}},
	}
}

var FOLLOWS = func() map[Kind]KindSet {
	return map[Kind]KindSet{
		CLOSECUBR:                         {STRUCT: {}, FUNC: {}, IMPL: {}, CLOSECUBR: {}, SEMI: {}},
		RETURN:                            {OPENPAR: {}},
		FLOAT:                             {IF: {}, WHILE: {}, OPENSQBR: {}, PRIVATE: {}, RETURN: {}, CLOSECUBR: {}, ID: {}, LET: {}, COMMA: {}, OPENCUBR: {}, READ: {}, SEMI: {}, PUBLIC: {}, CLOSEPAR: {}, WRITE: {}},
		ARRAYSIZE:                         {SEMI: {}, OPENSQBR: {}, COMMA: {}, CLOSEPAR: {}},
		FUNCTIONCALL:                      {},
		STRUCTORIMPLORFUNC:                {FUNC: {}, STRUCT: {}, IMPL: {}},
		RELOP:                             {INTNUM: {}, NOT: {}, ID: {}, FLOATNUM: {}, MINUS: {}, OPENPAR: {}, PLUS: {}},
		SIGN:                              {OPENPAR: {}, NOT: {}, MINUS: {}, FLOATNUM: {}, ID: {}, PLUS: {}, INTNUM: {}},
		ARROW:                             {VOID: {}, FLOAT: {}, INTEGER: {}, ID: {}},
		READ:                              {OPENPAR: {}},
		MORE_ASSIGN:                       {CLOSECUBR: {}, LET: {}, SEMI: {}, ID: {}, WHILE: {}, RETURN: {}, IF: {}, READ: {}, WRITE: {}},
		OR:                                {NOT: {}, OPENPAR: {}, INTNUM: {}, PLUS: {}, FLOATNUM: {}, MINUS: {}, ID: {}},
		ID:                                {OPENSQBR: {}, MINUS: {}, MULT: {}, OR: {}, COMMA: {}, LT: {}, GT: {}, CLOSEPAR: {}, AND: {}, PRIVATE: {}, PLUS: {}, ID: {}, ASSIGN: {}, OPENCUBR: {}, LEQ: {}, EQ: {}, COLON: {}, INHERITS: {}, WRITE: {}, OPENPAR: {}, DOT: {}, SEMI: {}, GEQ: {}, IMPL: {}, WHILE: {}, READ: {}, NOTEQ: {}, DIV: {}, STRUCT: {}, IF: {}, LET: {}, CLOSESQBR: {}, FUNC: {}, CLOSECUBR: {}, PUBLIC: {}, RETURN: {}},
		VARDECL:                           {PUBLIC: {}, READ: {}, RETURN: {}, PRIVATE: {}, WHILE: {}, CLOSECUBR: {}, ID: {}, LET: {}, WRITE: {}, IF: {}},
		STRUCTDECL:                        {IMPL: {}, STRUCT: {}, FUNC: {}},
		LET:                               {ID: {}},
		REPT_APARAMS1:                     {CLOSEPAR: {}},
		REPT_VARDECL4:                     {SEMI: {}},
		VOID:                              {OPENCUBR: {}, SEMI: {}},
		LT:                                {FLOATNUM: {}, INTNUM: {}, MINUS: {}, PLUS: {}, ID: {}, NOT: {}, OPENPAR: {}},
		FPARAMSTAIL:                       {CLOSEPAR: {}, COMMA: {}},
		EXPR:                              {COMMA: {}, SEMI: {}, CLOSEPAR: {}},
		FLOATNUM:                          {NOTEQ: {}, COMMA: {}, MINUS: {}, EQ: {}, CLOSESQBR: {}, MULT: {}, LEQ: {}, GT: {}, AND: {}, DIV: {}, GEQ: {}, SEMI: {}, OR: {}, PLUS: {}, CLOSEPAR: {}, LT: {}},
		DOT:                               {ID: {}},
		REPT_STRUCTDECL4:                  {CLOSECUBR: {}},
		ARITHORRELEXPR_DISAMBIGUATE:       {COMMA: {}, CLOSEPAR: {}, SEMI: {}},
		FUNCBODY:                          {STRUCT: {}, IMPL: {}, FUNC: {}, CLOSECUBR: {}},
		THEN:                              {WRITE: {}, OPENCUBR: {}, READ: {}, ID: {}, IF: {}, LET: {}, WHILE: {}, CLOSECUBR: {}, SEMI: {}, RETURN: {}},
		VISIBILITY:                        {LET: {}, FUNC: {}},
		REPT_OPT_STRUCTDECL22:             {OPENCUBR: {}},
		NOTEQ:                             {PLUS: {}, MINUS: {}, FLOATNUM: {}, ID: {}, INTNUM: {}, NOT: {}, OPENPAR: {}},
		GEQ:                               {INTNUM: {}, NOT: {}, OPENPAR: {}, FLOATNUM: {}, MINUS: {}, PLUS: {}, ID: {}},
		COLON:                             {ID: {}, INTEGER: {}, FLOAT: {}},
		STRUCT:                            {ID: {}},
		IMPL:                              {ID: {}},
		REPT_PROG0:                        {},
		APARAMS:                           {CLOSEPAR: {}},
		FUNCDEF:                           {FUNC: {}, CLOSECUBR: {}, IMPL: {}, STRUCT: {}},
		ASSIGNSTAT:                        {},
		OPENCUBR:                          {STRUCT: {}, WRITE: {}, WHILE: {}, FUNC: {}, RETURN: {}, LET: {}, IF: {}, SEMI: {}, PUBLIC: {}, PRIVATE: {}, IMPL: {}, READ: {}, ID: {}, CLOSECUBR: {}},
		VARORFUNCCALL_DISAMBIGUATE:        {PLUS: {}, MINUS: {}, CLOSEPAR: {}, EQ: {}, COMMA: {}, GEQ: {}, CLOSESQBR: {}, ID: {}, DIV: {}, LEQ: {}, NOTEQ: {}, AND: {}, OR: {}, GT: {}, LT: {}, SEMI: {}, MULT: {}},
		LEQ:                               {ID: {}, OPENPAR: {}, PLUS: {}, INTNUM: {}, NOT: {}, FLOATNUM: {}, MINUS: {}},
		IF:                                {OPENPAR: {}},
		EPSILON:                           {NOTEQ: {}, DIV: {}, LEQ: {}, SEMI: {}, CLOSESQBR: {}, LT: {}, ID: {}, EQ: {}, MULT: {}, GT: {}, PLUS: {}, AND: {}, MINUS: {}, CLOSECUBR: {}, OPENCUBR: {}, DOT: {}, CLOSEPAR: {}, COMMA: {}, GEQ: {}, OR: {}, ASSIGN: {}},
		PROG:                              {},
		STATEMENT:                         {CLOSECUBR: {}, READ: {}, LET: {}, WHILE: {}, IF: {}, ID: {}, SEMI: {}, WRITE: {}, RETURN: {}},
		INHERITS:                          {ID: {}},
		RELEXPR:                           {CLOSEPAR: {}},
		SEMI:                              {WHILE: {}, CLOSECUBR: {}, RETURN: {}, WRITE: {}, STRUCT: {}, READ: {}, IMPL: {}, PRIVATE: {}, SEMI: {}, PUBLIC: {}, LET: {}, FUNC: {}, ID: {}, IF: {}},
		PLUS:                              {MINUS: {}, ID: {}, PLUS: {}, FLOATNUM: {}, INTNUM: {}, OPENPAR: {}, NOT: {}},
		ARITHEXPR:                         {EQ: {}, NOTEQ: {}, LEQ: {}, COMMA: {}, SEMI: {}, CLOSESQBR: {}, GEQ: {}, CLOSEPAR: {}, LT: {}, GT: {}},
		NOT:                               {MINUS: {}, OPENPAR: {}, INTNUM: {}, PLUS: {}, ID: {}, NOT: {}, FLOATNUM: {}},
		MINUS:                             {INTNUM: {}, OPENPAR: {}, MINUS: {}, NOT: {}, FLOATNUM: {}, ID: {}, PLUS: {}},
		INTEGER:                           {READ: {}, WRITE: {}, CLOSEPAR: {}, ID: {}, LET: {}, SEMI: {}, OPENSQBR: {}, PUBLIC: {}, RETURN: {}, IF: {}, COMMA: {}, WHILE: {}, CLOSECUBR: {}, OPENCUBR: {}, PRIVATE: {}},
		REPT_FPARAMSTAIL4:                 {COMMA: {}, CLOSEPAR: {}},
		MORE_FUNC:                         {ID: {}, CLOSECUBR: {}, RETURN: {}, WHILE: {}, READ: {}, IF: {}, SEMI: {}, WRITE: {}, LET: {}},
		VARIABLE:                          {CLOSEPAR: {}, ASSIGN: {}},
		ANOTHER:                           {CLOSEPAR: {}, EQ: {}, MINUS: {}, AND: {}, DIV: {}, LT: {}, MULT: {}, GT: {}, PLUS: {}, ID: {}, COMMA: {}, GEQ: {}, LEQ: {}, OR: {}, CLOSESQBR: {}, NOTEQ: {}, SEMI: {}},
		TYPE:                              {WHILE: {}, PUBLIC: {}, RETURN: {}, CLOSEPAR: {}, ID: {}, READ: {}, OPENCUBR: {}, WRITE: {}, OPENSQBR: {}, PRIVATE: {}, CLOSECUBR: {}, LET: {}, IF: {}, COMMA: {}, SEMI: {}},
		REPT_FUNCBODY1:                    {CLOSECUBR: {}},
		VARORFUNCCALL:                     {GT: {}, LT: {}, ID: {}, NOTEQ: {}, DIV: {}, CLOSEPAR: {}, EQ: {}, MULT: {}, COMMA: {}, OR: {}, SEMI: {}, GEQ: {}, AND: {}, PLUS: {}, LEQ: {}, CLOSESQBR: {}, MINUS: {}},
		OPT_STRUCTDECL2:                   {OPENCUBR: {}},
		VARDECLORSTAT:                     {IF: {}, LET: {}, RETURN: {}, CLOSECUBR: {}, READ: {}, ID: {}, WHILE: {}, WRITE: {}},
		MORE_INDICE:                       {DOT: {}, CLOSEPAR: {}, ID: {}, GT: {}, GEQ: {}, LEQ: {}, OR: {}, LT: {}, SEMI: {}, CLOSESQBR: {}, COMMA: {}, NOTEQ: {}, ASSIGN: {}, EQ: {}, PLUS: {}, MINUS: {}, MULT: {}, DIV: {}, AND: {}},
		EQ:                                {ID: {}, INTNUM: {}, PLUS: {}, OPENPAR: {}, FLOATNUM: {}, NOT: {}, MINUS: {}},
		PUBLIC:                            {LET: {}, FUNC: {}},
		RIGHTREC_TERM:                     {SEMI: {}, GEQ: {}, GT: {}, PLUS: {}, EQ: {}, OR: {}, CLOSESQBR: {}, LEQ: {}, LT: {}, CLOSEPAR: {}, NOTEQ: {}, MINUS: {}, COMMA: {}},
		ADDOP:                             {NOT: {}, MINUS: {}, ID: {}, PLUS: {}, OPENPAR: {}, FLOATNUM: {}, INTNUM: {}},
		RIGHTREC_ARITHEXPR:                {GT: {}, LT: {}, CLOSESQBR: {}, NOTEQ: {}, SEMI: {}, EQ: {}, COMMA: {}, LEQ: {}, CLOSEPAR: {}, GEQ: {}},
		GT:                                {FLOATNUM: {}, OPENPAR: {}, NOT: {}, PLUS: {}, INTNUM: {}, ID: {}, MINUS: {}},
		ASSIGN:                            {OPENPAR: {}, PLUS: {}, INTNUM: {}, FLOATNUM: {}, NOT: {}, ID: {}, MINUS: {}},
		STATBLOCK:                         {SEMI: {}},
		IMPLDEF:                           {FUNC: {}, STRUCT: {}, IMPL: {}},
		REPT_IMPLDEF3:                     {CLOSECUBR: {}},
		CLOSEPAR:                          {OR: {}, WRITE: {}, EQ: {}, COMMA: {}, OPENCUBR: {}, ARROW: {}, CLOSESQBR: {}, LT: {}, ID: {}, WHILE: {}, THEN: {}, IF: {}, LET: {}, GT: {}, SEMI: {}, RETURN: {}, READ: {}, DOT: {}, GEQ: {}, LEQ: {}, NOTEQ: {}, MULT: {}, CLOSECUBR: {}, PLUS: {}, MINUS: {}, AND: {}, CLOSEPAR: {}, DIV: {}},
		PRIVATE:                           {FUNC: {}, LET: {}},
		FUNC:                              {ID: {}},
		ASSIGNSTATORFUNCCALL_DISAMBIGUATE: {READ: {}, LET: {}, SEMI: {}, CLOSECUBR: {}, ID: {}, WRITE: {}, RETURN: {}, WHILE: {}, IF: {}},
		OPENPAR:                           {OPENPAR: {}, MULT: {}, GT: {}, GEQ: {}, CLOSESQBR: {}, COMMA: {}, OPENCUBR: {}, IF: {}, READ: {}, CLOSEPAR: {}, EQ: {}, LET: {}, WRITE: {}, LT: {}, FLOATNUM: {}, CLOSECUBR: {}, WHILE: {}, AND: {}, OR: {}, PLUS: {}, SEMI: {}, RETURN: {}, NOT: {}, INTNUM: {}, NOTEQ: {}, MINUS: {}, ID: {}, DIV: {}, LEQ: {}},
		MULT:                              {ID: {}, PLUS: {}, OPENPAR: {}, INTNUM: {}, MINUS: {}, NOT: {}, FLOATNUM: {}},
		SOMETHING:                         {ASSIGN: {}, CLOSEPAR: {}},
		INDICE:                            {OPENSQBR: {}, AND: {}, NOTEQ: {}, ASSIGN: {}, CLOSESQBR: {}, EQ: {}, MINUS: {}, READ: {}, LET: {}, CLOSECUBR: {}, GEQ: {}, MULT: {}, ID: {}, WHILE: {}, DOT: {}, SEMI: {}, DIV: {}, PLUS: {}, COMMA: {}, GT: {}, WRITE: {}, RETURN: {}, LEQ: {}, LT: {}, IF: {}, OR: {}, CLOSEPAR: {}},
		DIV:                               {INTNUM: {}, FLOATNUM: {}, OPENPAR: {}, NOT: {}, PLUS: {}, ID: {}, MINUS: {}},
		RETURNTYPE:                        {OPENCUBR: {}, SEMI: {}},
		MEMBERDECL:                        {PUBLIC: {}, PRIVATE: {}, CLOSECUBR: {}},
		START:                             {},
		FUNCHEAD:                          {SEMI: {}, OPENCUBR: {}},
		FUNCDECL:                          {PRIVATE: {}, CLOSECUBR: {}, PUBLIC: {}},
		MULTOP:                            {ID: {}, MINUS: {}, OPENPAR: {}, INTNUM: {}, NOT: {}, PLUS: {}, FLOATNUM: {}},
		ARRAYSIZE_FACTORIZED:              {SEMI: {}, COMMA: {}, CLOSEPAR: {}, OPENSQBR: {}},
		AND:                               {NOT: {}, FLOATNUM: {}, MINUS: {}, INTNUM: {}, PLUS: {}, OPENPAR: {}, ID: {}},
		WRITE:                             {OPENPAR: {}},
		REPT_STATBLOCK1:                   {CLOSECUBR: {}},
		TERM:                              {PLUS: {}, EQ: {}, LEQ: {}, LT: {}, NOTEQ: {}, MINUS: {}, SEMI: {}, OR: {}, GEQ: {}, GT: {}, CLOSEPAR: {}, COMMA: {}, CLOSESQBR: {}},
		OPENSQBR:                          {NOT: {}, INTNUM: {}, PLUS: {}, MINUS: {}, FLOATNUM: {}, CLOSESQBR: {}, ID: {}, OPENPAR: {}},
		CLOSESQBR:                         {CLOSECUBR: {}, RETURN: {}, COMMA: {}, WRITE: {}, ASSIGN: {}, MULT: {}, SEMI: {}, WHILE: {}, GT: {}, OR: {}, ID: {}, LEQ: {}, AND: {}, GEQ: {}, LET: {}, READ: {}, DIV: {}, PLUS: {}, LT: {}, CLOSEPAR: {}, OPENSQBR: {}, NOTEQ: {}, MINUS: {}, CLOSESQBR: {}, IF: {}, EQ: {}, DOT: {}},
		FPARAMS:                           {CLOSEPAR: {}},
		COMMA:                             {OPENPAR: {}, FLOATNUM: {}, ID: {}, MINUS: {}, INTNUM: {}, NOT: {}, PLUS: {}},
		REPT_FPARAMS4:                     {CLOSEPAR: {}},
		APARAMSTAIL:                       {COMMA: {}, CLOSEPAR: {}},
		ELSE:                              {RETURN: {}, ID: {}, IF: {}, WRITE: {}, LET: {}, CLOSECUBR: {}, OPENCUBR: {}, WHILE: {}, READ: {}, SEMI: {}},
		INTNUM:                            {EQ: {}, CLOSESQBR: {}, COMMA: {}, PLUS: {}, DIV: {}, GEQ: {}, MINUS: {}, NOTEQ: {}, CLOSEPAR: {}, SEMI: {}, LEQ: {}, GT: {}, LT: {}, AND: {}, OR: {}, MULT: {}},
		WHILE:                             {OPENPAR: {}},
		ASSIGNSTATORFUNCCALL:              {RETURN: {}, ID: {}, WHILE: {}, LET: {}, READ: {}, CLOSECUBR: {}, SEMI: {}, IF: {}, WRITE: {}},
		REPT_FPARAMS3:                     {COMMA: {}, CLOSEPAR: {}},
		ASSIGNOP:                          {OPENPAR: {}, FLOATNUM: {}, ID: {}, MINUS: {}, INTNUM: {}, NOT: {}, PLUS: {}},
		SOMETHING_FUNC:                    {},
		FACTOR:                            {AND: {}, GEQ: {}, CLOSEPAR: {}, SEMI: {}, EQ: {}, OR: {}, NOTEQ: {}, CLOSESQBR: {}, LEQ: {}, MULT: {}, GT: {}, PLUS: {}, DIV: {}, COMMA: {}, MINUS: {}, LT: {}},
	}
}

type Key struct {
	Nonterminal Kind
	Terminal    Kind
}

var TABLE = func() map[Key]Rule {
	return map[Key]Rule{
		{ANOTHER, DOT}:                                {ANOTHER, []Kind{DOT, VARORFUNCCALL}},
		{ANOTHER, GEQ}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, PLUS}:                               {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, ID}:                                 {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, COMMA}:                              {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, LEQ}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, OR}:                                 {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, CLOSESQBR}:                          {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, NOTEQ}:                              {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, SEMI}:                               {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, CLOSEPAR}:                           {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, EQ}:                                 {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, MINUS}:                              {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, AND}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, DIV}:                                {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, LT}:                                 {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, MULT}:                               {ANOTHER, []Kind{EPSILON}},
		{ANOTHER, GT}:                                 {ANOTHER, []Kind{EPSILON}},
		{FUNCTIONCALL, ID}:                            {FUNCTIONCALL, []Kind{ID, SEM_ID_MAKENODE, OPENPAR, APARAMS, CLOSEPAR, SOMETHING_FUNC}},
		{SIGN, PLUS}:                                  {SIGN, []Kind{PLUS}},
		{SIGN, MINUS}:                                 {SIGN, []Kind{MINUS}},
		{REPT_FPARAMS3, OPENSQBR}:                     {REPT_FPARAMS3, []Kind{ARRAYSIZE, REPT_FPARAMS3}},
		{REPT_FPARAMS3, COMMA}:                        {REPT_FPARAMS3, []Kind{EPSILON}},
		{REPT_FPARAMS3, CLOSEPAR}:                     {REPT_FPARAMS3, []Kind{EPSILON}},
		{REPT_IMPLDEF3, FUNC}:                         {REPT_IMPLDEF3, []Kind{FUNCDEF, REPT_IMPLDEF3}},
		{REPT_IMPLDEF3, CLOSECUBR}:                    {REPT_IMPLDEF3, []Kind{EPSILON}},
		{FUNCHEAD, FUNC}:                              {FUNCHEAD, []Kind{FUNC, ID, SEM_ID_MAKENODE, OPENPAR, FPARAMS, CLOSEPAR, ARROW, RETURNTYPE}},
		{ASSIGNSTATORFUNCCALL, ID}:                    {ASSIGNSTATORFUNCCALL, []Kind{ID, SEM_ID_MAKENODE, ASSIGNSTATORFUNCCALL_DISAMBIGUATE}},
		{INDICE, OPENSQBR}:                            {INDICE, []Kind{OPENSQBR, ARITHEXPR, CLOSESQBR}},
		{VARORFUNCCALL_DISAMBIGUATE, OPENPAR}:         {VARORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, SEM_FCALL_MAKENODE, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, OPENSQBR}:        {VARORFUNCCALL_DISAMBIGUATE, []Kind{INDICE, MORE_INDICE, ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, DOT}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, GT}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, LT}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, NOTEQ}:           {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, AND}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, OR}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, SEMI}:            {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, MULT}:            {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, CLOSEPAR}:        {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, EQ}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, PLUS}:            {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, MINUS}:           {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, ID}:              {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, DIV}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, COMMA}:           {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, GEQ}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, CLOSESQBR}:       {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{VARORFUNCCALL_DISAMBIGUATE, LEQ}:             {VARORFUNCCALL_DISAMBIGUATE, []Kind{ANOTHER}},
		{REPT_PROG0, STRUCT}:                          {REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}},
		{REPT_PROG0, IMPL}:                            {REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}},
		{REPT_PROG0, FUNC}:                            {REPT_PROG0, []Kind{STRUCTORIMPLORFUNC, SEM_REPT_PROG0_MAKESIBLING, REPT_PROG0}},
		{STRUCTORIMPLORFUNC, STRUCT}:                  {STRUCTORIMPLORFUNC, []Kind{STRUCTDECL, SEM_STRUCT_DECL_MAKEFAMILY}},
		{STRUCTORIMPLORFUNC, IMPL}:                    {STRUCTORIMPLORFUNC, []Kind{IMPLDEF, SEM_IMPL_DEF_MAKEFAMILY}},
		{STRUCTORIMPLORFUNC, FUNC}:                    {STRUCTORIMPLORFUNC, []Kind{FUNCDEF, SEM_FUNC_DEF_MAKEFAMILY}},
		{STRUCTDECL, STRUCT}:                          {STRUCTDECL, []Kind{STRUCT, ID, SEM_ID_MAKENODE, OPT_STRUCTDECL2, OPENCUBR, REPT_STRUCTDECL4, CLOSECUBR, SEMI}},
		{ARRAYSIZE_FACTORIZED, CLOSESQBR}:             {ARRAYSIZE_FACTORIZED, []Kind{CLOSESQBR}},
		{ARRAYSIZE_FACTORIZED, INTNUM}:                {ARRAYSIZE_FACTORIZED, []Kind{INTNUM, CLOSESQBR}},
		{TYPE, INTEGER}:                               {TYPE, []Kind{INTEGER, SEM_INTEGER_MAKENODE}},
		{TYPE, FLOAT}:                                 {TYPE, []Kind{FLOAT, SEM_FLOAT_MAKENODE}},
		{TYPE, ID}:                                    {TYPE, []Kind{ID, SEM_ID_MAKENODE}},
		{APARAMSTAIL, COMMA}:                          {APARAMSTAIL, []Kind{COMMA, EXPR}},
		{FUNCBODY, OPENCUBR}:                          {FUNCBODY, []Kind{OPENCUBR, REPT_FUNCBODY1, CLOSECUBR}},
		{VARDECL, LET}:                                {VARDECL, []Kind{LET, ID, SEM_ID_MAKENODE, COLON, TYPE, REPT_VARDECL4, SEMI}},
		{MORE_ASSIGN, DOT}:                            {MORE_ASSIGN, []Kind{DOT, ASSIGNSTATORFUNCCALL}},
		{MORE_ASSIGN, ASSIGN}:                         {MORE_ASSIGN, []Kind{ASSIGNOP, EXPR, SEMI, SEM_ASSIGN_MAKEFAMILY}},
		{MORE_INDICE, OPENSQBR}:                       {MORE_INDICE, []Kind{INDICE, MORE_INDICE}},
		{MORE_INDICE, NOTEQ}:                          {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, CLOSESQBR}:                      {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, COMMA}:                          {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, ASSIGN}:                         {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, MINUS}:                          {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, MULT}:                           {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, EQ}:                             {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, PLUS}:                           {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, DIV}:                            {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, AND}:                            {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, ID}:                             {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, GT}:                             {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, DOT}:                            {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, CLOSEPAR}:                       {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, GEQ}:                            {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, LEQ}:                            {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, SEMI}:                           {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, OR}:                             {MORE_INDICE, []Kind{EPSILON}},
		{MORE_INDICE, LT}:                             {MORE_INDICE, []Kind{EPSILON}},
		{TERM, MINUS}:                                 {TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}},
		{TERM, ID}:                                    {TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}},
		{TERM, INTNUM}:                                {TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}},
		{TERM, FLOATNUM}:                              {TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}},
		{TERM, OPENPAR}:                               {TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}},
		{TERM, NOT}:                                   {TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}},
		{TERM, PLUS}:                                  {TERM, []Kind{FACTOR, SEM_FACTOR_MAKENODE, RIGHTREC_TERM}},
		{ARITHORRELEXPR_DISAMBIGUATE, GT}:             {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR}},
		{ARITHORRELEXPR_DISAMBIGUATE, LEQ}:            {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR}},
		{ARITHORRELEXPR_DISAMBIGUATE, GEQ}:            {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR}},
		{ARITHORRELEXPR_DISAMBIGUATE, EQ}:             {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR}},
		{ARITHORRELEXPR_DISAMBIGUATE, NOTEQ}:          {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR}},
		{ARITHORRELEXPR_DISAMBIGUATE, LT}:             {ARITHORRELEXPR_DISAMBIGUATE, []Kind{RELOP, ARITHEXPR}},
		{ARITHORRELEXPR_DISAMBIGUATE, CLOSEPAR}:       {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON, SEM_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, SEMI}:           {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON, SEM_EXPR_MAKENODE}},
		{ARITHORRELEXPR_DISAMBIGUATE, COMMA}:          {ARITHORRELEXPR_DISAMBIGUATE, []Kind{EPSILON, SEM_EXPR_MAKENODE}},
		{RIGHTREC_TERM, MULT}:                         {RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULT_MAKEFAMILY, RIGHTREC_TERM}},
		{RIGHTREC_TERM, DIV}:                          {RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULT_MAKEFAMILY, RIGHTREC_TERM}},
		{RIGHTREC_TERM, AND}:                          {RIGHTREC_TERM, []Kind{MULTOP, FACTOR, SEM_MULT_MAKEFAMILY, RIGHTREC_TERM}},
		{ARRAYSIZE, OPENSQBR}:                         {ARRAYSIZE, []Kind{OPENSQBR, ARRAYSIZE_FACTORIZED}},
		{REPT_FPARAMS4, COMMA}:                        {REPT_FPARAMS4, []Kind{FPARAMSTAIL, REPT_FPARAMS4}},
		{REPT_FPARAMS4, CLOSEPAR}:                     {REPT_FPARAMS4, []Kind{EPSILON}},
		{FUNCDECL, FUNC}:                              {FUNCDECL, []Kind{FUNCHEAD, SEMI}},
		{STATEMENT, ID}:                               {STATEMENT, []Kind{ASSIGNSTATORFUNCCALL}},
		{STATEMENT, IF}:                               {STATEMENT, []Kind{IF, OPENPAR, RELEXPR, CLOSEPAR, THEN, STATBLOCK, ELSE, STATBLOCK, SEMI, SEM_IF_MAKEFAMILY}},
		{STATEMENT, WHILE}:                            {STATEMENT, []Kind{WHILE, OPENPAR, RELEXPR, CLOSEPAR, STATBLOCK, SEMI, SEM_WHILE_MAKEFAMILY}},
		{STATEMENT, READ}:                             {STATEMENT, []Kind{READ, OPENPAR, VARIABLE, CLOSEPAR, SEMI, SEM_READ_MAKEFAMILY}},
		{STATEMENT, WRITE}:                            {STATEMENT, []Kind{WRITE, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_WRITE_MAKEFAMILY}},
		{STATEMENT, RETURN}:                           {STATEMENT, []Kind{RETURN, OPENPAR, EXPR, CLOSEPAR, SEMI, SEM_RETURN_MAKEFAMILY}},
		{STATBLOCK, OPENCUBR}:                         {STATBLOCK, []Kind{OPENCUBR, REPT_STATBLOCK1, CLOSECUBR}},
		{STATBLOCK, ID}:                               {STATBLOCK, []Kind{STATEMENT}},
		{STATBLOCK, IF}:                               {STATBLOCK, []Kind{STATEMENT}},
		{STATBLOCK, WHILE}:                            {STATBLOCK, []Kind{STATEMENT}},
		{STATBLOCK, READ}:                             {STATBLOCK, []Kind{STATEMENT}},
		{STATBLOCK, WRITE}:                            {STATBLOCK, []Kind{STATEMENT}},
		{STATBLOCK, RETURN}:                           {STATBLOCK, []Kind{STATEMENT}},
		{STATBLOCK, SEMI}:                             {STATBLOCK, []Kind{EPSILON}},
		{REPT_STATBLOCK1, RETURN}:                     {REPT_STATBLOCK1, []Kind{STATEMENT, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, ID}:                         {REPT_STATBLOCK1, []Kind{STATEMENT, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, IF}:                         {REPT_STATBLOCK1, []Kind{STATEMENT, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, WHILE}:                      {REPT_STATBLOCK1, []Kind{STATEMENT, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, READ}:                       {REPT_STATBLOCK1, []Kind{STATEMENT, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, WRITE}:                      {REPT_STATBLOCK1, []Kind{STATEMENT, REPT_STATBLOCK1}},
		{REPT_STATBLOCK1, CLOSECUBR}:                  {REPT_STATBLOCK1, []Kind{EPSILON}},
		{EXPR, PLUS}:                                  {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}},
		{EXPR, MINUS}:                                 {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}},
		{EXPR, ID}:                                    {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}},
		{EXPR, INTNUM}:                                {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}},
		{EXPR, FLOATNUM}:                              {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}},
		{EXPR, OPENPAR}:                               {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}},
		{EXPR, NOT}:                                   {EXPR, []Kind{ARITHEXPR, ARITHORRELEXPR_DISAMBIGUATE}},
		{ARITHEXPR, MINUS}:                            {ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, ID}:                               {ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, INTNUM}:                           {ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, FLOATNUM}:                         {ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, OPENPAR}:                          {ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, NOT}:                              {ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{ARITHEXPR, PLUS}:                             {ARITHEXPR, []Kind{TERM, SEM_TERM_MAKENODE, RIGHTREC_ARITHEXPR, SEM_ARITH_EXPR_MAKENODE}},
		{IMPLDEF, IMPL}:                               {IMPLDEF, []Kind{IMPL, ID, SEM_ID_MAKENODE, OPENCUBR, REPT_IMPLDEF3, CLOSECUBR}},
		{VISIBILITY, PUBLIC}:                          {VISIBILITY, []Kind{PUBLIC}},
		{VISIBILITY, PRIVATE}:                         {VISIBILITY, []Kind{PRIVATE}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, OPENSQBR}: {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{INDICE, MORE_INDICE, MORE_ASSIGN}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, OPENPAR}:  {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{OPENPAR, APARAMS, CLOSEPAR, MORE_FUNC}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, DOT}:      {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{MORE_ASSIGN}},
		{ASSIGNSTATORFUNCCALL_DISAMBIGUATE, ASSIGN}:   {ASSIGNSTATORFUNCCALL_DISAMBIGUATE, []Kind{MORE_ASSIGN}},
		{FACTOR, ID}:                                  {FACTOR, []Kind{VARORFUNCCALL, SEM_FACTOR_UP}},
		{FACTOR, INTNUM}:                              {FACTOR, []Kind{INTNUM, SEM_INTNUM_MAKENODE}},
		{FACTOR, FLOATNUM}:                            {FACTOR, []Kind{FLOATNUM, SEM_FLOATNUM_MAKENODE}},
		{FACTOR, OPENPAR}:                             {FACTOR, []Kind{OPENPAR, ARITHEXPR, CLOSEPAR}},
		{FACTOR, NOT}:                                 {FACTOR, []Kind{NOT, FACTOR}},
		{FACTOR, PLUS}:                                {FACTOR, []Kind{SIGN, FACTOR}},
		{FACTOR, MINUS}:                               {FACTOR, []Kind{SIGN, FACTOR}},
		{ASSIGNSTAT, ID}:                              {ASSIGNSTAT, []Kind{VARIABLE, ASSIGNOP, EXPR}},
		{START, STRUCT}:                               {START, []Kind{PROG}},
		{START, IMPL}:                                 {START, []Kind{PROG}},
		{START, FUNC}:                                 {START, []Kind{PROG}},
		{PROG, STRUCT}:                                {PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}},
		{PROG, IMPL}:                                  {PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}},
		{PROG, FUNC}:                                  {PROG, []Kind{REPT_PROG0, SEM_PROG_MAKE_NODE}},
		{REPT_FPARAMSTAIL4, OPENSQBR}:                 {REPT_FPARAMSTAIL4, []Kind{ARRAYSIZE, REPT_FPARAMSTAIL4}},
		{REPT_FPARAMSTAIL4, COMMA}:                    {REPT_FPARAMSTAIL4, []Kind{EPSILON}},
		{REPT_FPARAMSTAIL4, CLOSEPAR}:                 {REPT_FPARAMSTAIL4, []Kind{EPSILON}},
		{APARAMS, OPENPAR}:                            {APARAMS, []Kind{EXPR, REPT_APARAMS1}},
		{APARAMS, NOT}:                                {APARAMS, []Kind{EXPR, REPT_APARAMS1}},
		{APARAMS, PLUS}:                               {APARAMS, []Kind{EXPR, REPT_APARAMS1}},
		{APARAMS, MINUS}:                              {APARAMS, []Kind{EXPR, REPT_APARAMS1}},
		{APARAMS, ID}:                                 {APARAMS, []Kind{EXPR, REPT_APARAMS1}},
		{APARAMS, INTNUM}:                             {APARAMS, []Kind{EXPR, REPT_APARAMS1}},
		{APARAMS, FLOATNUM}:                           {APARAMS, []Kind{EXPR, REPT_APARAMS1}},
		{APARAMS, CLOSEPAR}:                           {APARAMS, []Kind{EPSILON}},
		{MULTOP, MULT}:                                {MULTOP, []Kind{MULT, SEM_MULT_MAKENODE}},
		{MULTOP, DIV}:                                 {MULTOP, []Kind{DIV, SEM_MULT_MAKENODE}},
		{MULTOP, AND}:                                 {MULTOP, []Kind{AND, SEM_MULT_MAKENODE}},
		{OPT_STRUCTDECL2, INHERITS}:                   {OPT_STRUCTDECL2, []Kind{INHERITS, ID, SEM_ID_MAKENODE, REPT_OPT_STRUCTDECL22}},
		{OPT_STRUCTDECL2, OPENCUBR}:                   {OPT_STRUCTDECL2, []Kind{EPSILON}},
		{FUNCDEF, FUNC}:                               {FUNCDEF, []Kind{FUNCHEAD, FUNCBODY}},
		{MORE_FUNC, DOT}:                              {MORE_FUNC, []Kind{DOT, ASSIGNSTATORFUNCCALL}},
		{MORE_FUNC, SEMI}:                             {MORE_FUNC, []Kind{SEMI, SEM_FUNC_CALL_MAKEFAMILY}},
		{VARIABLE, ID}:                                {VARIABLE, []Kind{ID, SEM_ID_MAKENODE, MORE_INDICE, SOMETHING}},
		{SOMETHING, DOT}:                              {SOMETHING, []Kind{DOT, VARORFUNCCALL, ID, SEM_ID_MAKENODE, MORE_INDICE}},
		{SOMETHING, ASSIGN}:                           {SOMETHING, []Kind{EPSILON}},
		{SOMETHING, CLOSEPAR}:                         {SOMETHING, []Kind{EPSILON}},
		{REPT_FUNCBODY1, WHILE}:                       {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, READ}:                        {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, WRITE}:                       {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, RETURN}:                      {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, LET}:                         {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, ID}:                          {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, IF}:                          {REPT_FUNCBODY1, []Kind{VARDECLORSTAT, SEM_FUNC_BODY_MAKEFAMILY, REPT_FUNCBODY1}},
		{REPT_FUNCBODY1, CLOSECUBR}:                   {REPT_FUNCBODY1, []Kind{EPSILON, SEM_FUNC_BODY_MAKEFAMILY}},
		{REPT_VARDECL4, OPENSQBR}:                     {REPT_VARDECL4, []Kind{ARRAYSIZE, REPT_VARDECL4}},
		{REPT_VARDECL4, SEMI}:                         {REPT_VARDECL4, []Kind{EPSILON}},
		{RELOP, EQ}:                                   {RELOP, []Kind{EQ}},
		{RELOP, NOTEQ}:                                {RELOP, []Kind{NOTEQ}},
		{RELOP, LT}:                                   {RELOP, []Kind{LT}},
		{RELOP, GT}:                                   {RELOP, []Kind{GT}},
		{RELOP, LEQ}:                                  {RELOP, []Kind{LEQ}},
		{RELOP, GEQ}:                                  {RELOP, []Kind{GEQ}},
		{REPT_STRUCTDECL4, PUBLIC}:                    {REPT_STRUCTDECL4, []Kind{VISIBILITY, MEMBERDECL, REPT_STRUCTDECL4}},
		{REPT_STRUCTDECL4, PRIVATE}:                   {REPT_STRUCTDECL4, []Kind{VISIBILITY, MEMBERDECL, REPT_STRUCTDECL4}},
		{REPT_STRUCTDECL4, CLOSECUBR}:                 {REPT_STRUCTDECL4, []Kind{EPSILON}},
		{VARDECLORSTAT, LET}:                          {VARDECLORSTAT, []Kind{VARDECL, SEM_VAR_DECL_MAKEFAMILY}},
		{VARDECLORSTAT, RETURN}:                       {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, ID}:                           {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, IF}:                           {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, WHILE}:                        {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, READ}:                         {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{VARDECLORSTAT, WRITE}:                        {VARDECLORSTAT, []Kind{STATEMENT, SEM_STATEMENT_MAKEFAMILY}},
		{REPT_APARAMS1, COMMA}:                        {REPT_APARAMS1, []Kind{APARAMSTAIL, REPT_APARAMS1}},
		{REPT_APARAMS1, CLOSEPAR}:                     {REPT_APARAMS1, []Kind{EPSILON}},
		{MEMBERDECL, FUNC}:                            {MEMBERDECL, []Kind{FUNCDECL}},
		{MEMBERDECL, LET}:                             {MEMBERDECL, []Kind{VARDECL}},
		{VARORFUNCCALL, ID}:                           {VARORFUNCCALL, []Kind{ID, SEM_ID_MAKENODE, VARORFUNCCALL_DISAMBIGUATE, SEM_VAR_OR_FUNC_CALL_UP}},
		{SOMETHING_FUNC, DOT}:                         {SOMETHING_FUNC, []Kind{DOT, VARORFUNCCALL, ID, SEM_ID_MAKENODE, OPENPAR, APARAMS, CLOSEPAR}},
		{REPT_OPT_STRUCTDECL22, COMMA}:                {REPT_OPT_STRUCTDECL22, []Kind{COMMA, ID, SEM_ID_MAKENODE, REPT_OPT_STRUCTDECL22}},
		{REPT_OPT_STRUCTDECL22, OPENCUBR}:             {REPT_OPT_STRUCTDECL22, []Kind{EPSILON}},
		{RELEXPR, FLOATNUM}:                           {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}},
		{RELEXPR, OPENPAR}:                            {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}},
		{RELEXPR, NOT}:                                {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}},
		{RELEXPR, PLUS}:                               {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}},
		{RELEXPR, MINUS}:                              {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}},
		{RELEXPR, ID}:                                 {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}},
		{RELEXPR, INTNUM}:                             {RELEXPR, []Kind{ARITHEXPR, RELOP, ARITHEXPR}},
		{RIGHTREC_ARITHEXPR, OR}:                      {RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, RIGHTREC_ARITHEXPR}},
		{RIGHTREC_ARITHEXPR, PLUS}:                    {RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, RIGHTREC_ARITHEXPR}},
		{RIGHTREC_ARITHEXPR, MINUS}:                   {RIGHTREC_ARITHEXPR, []Kind{ADDOP, TERM, RIGHTREC_ARITHEXPR}},
		{RIGHTREC_ARITHEXPR, COMMA}:                   {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, EQ}:                      {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, LEQ}:                     {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, GEQ}:                     {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, CLOSEPAR}:                {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, LT}:                      {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, GT}:                      {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, NOTEQ}:                   {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, SEMI}:                    {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RIGHTREC_ARITHEXPR, CLOSESQBR}:               {RIGHTREC_ARITHEXPR, []Kind{EPSILON}},
		{RETURNTYPE, INTEGER}:                         {RETURNTYPE, []Kind{TYPE}},
		{RETURNTYPE, FLOAT}:                           {RETURNTYPE, []Kind{TYPE}},
		{RETURNTYPE, ID}:                              {RETURNTYPE, []Kind{TYPE}},
		{RETURNTYPE, VOID}:                            {RETURNTYPE, []Kind{VOID, SEM_VOID_MAKENODE, SEM_TYPE_MAKEFAMILY}},
		{FPARAMS, ID}:                                 {FPARAMS, []Kind{ID, SEM_ID_MAKENODE, COLON, TYPE, SEM_TYPE_MAKEFAMILY, REPT_FPARAMS3, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY, REPT_FPARAMS4}},
		{FPARAMS, CLOSEPAR}:                           {FPARAMS, []Kind{EPSILON, SEM_FPARAM_LIST_MAKEFAMILY}},
		{FPARAMSTAIL, COMMA}:                          {FPARAMSTAIL, []Kind{COMMA, ID, SEM_ID_MAKENODE, COLON, TYPE, SEM_TYPE_MAKEFAMILY, REPT_FPARAMSTAIL4, SEM_FPARAM_MAKEFAMILY, SEM_FPARAM_LIST_MAKEFAMILY}},
		{ASSIGNOP, ASSIGN}:                            {ASSIGNOP, []Kind{ASSIGN}},
		{ADDOP, PLUS}:                                 {ADDOP, []Kind{PLUS}},
		{ADDOP, MINUS}:                                {ADDOP, []Kind{MINUS}},
		{ADDOP, OR}:                                   {ADDOP, []Kind{OR}},
	}
}
